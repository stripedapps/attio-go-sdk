/*
Attio Standard Objects

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkspacesAPIService WorkspacesAPI service
type WorkspacesAPIService service

type ApiV2ObjectsWorkspacesRecordsPostRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	v2ObjectsWorkspacesRecordsPutRequest *V2ObjectsWorkspacesRecordsPutRequest
}

func (r ApiV2ObjectsWorkspacesRecordsPostRequest) V2ObjectsWorkspacesRecordsPutRequest(v2ObjectsWorkspacesRecordsPutRequest V2ObjectsWorkspacesRecordsPutRequest) ApiV2ObjectsWorkspacesRecordsPostRequest {
	r.v2ObjectsWorkspacesRecordsPutRequest = &v2ObjectsWorkspacesRecordsPutRequest
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsPostRequest) Execute() (*V2ObjectsWorkspacesRecordsPost200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsPostExecute(r)
}

/*
V2ObjectsWorkspacesRecordsPost Create a workspace record

Creates a new workspace record. This endpoint will throw on conflicts of unique attributes, like `workspace_id`. If you would prefer to update workspace records on conflicts, please use the Assert workspace record endpoint instead.

Required scopes: `record_permission:read-write`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2ObjectsWorkspacesRecordsPostRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsPost(ctx context.Context) ApiV2ObjectsWorkspacesRecordsPostRequest {
	return ApiV2ObjectsWorkspacesRecordsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2ObjectsWorkspacesRecordsPost200Response
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsPostExecute(r ApiV2ObjectsWorkspacesRecordsPostRequest) (*V2ObjectsWorkspacesRecordsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsWorkspacesRecordsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2ObjectsWorkspacesRecordsPutRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsWorkspacesRecordsPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsWorkspacesRecordsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsPut404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsWorkspacesRecordsPutRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	matchingAttribute *string
	v2ObjectsWorkspacesRecordsPutRequest *V2ObjectsWorkspacesRecordsPutRequest
}

func (r ApiV2ObjectsWorkspacesRecordsPutRequest) MatchingAttribute(matchingAttribute string) ApiV2ObjectsWorkspacesRecordsPutRequest {
	r.matchingAttribute = &matchingAttribute
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsPutRequest) V2ObjectsWorkspacesRecordsPutRequest(v2ObjectsWorkspacesRecordsPutRequest V2ObjectsWorkspacesRecordsPutRequest) ApiV2ObjectsWorkspacesRecordsPutRequest {
	r.v2ObjectsWorkspacesRecordsPutRequest = &v2ObjectsWorkspacesRecordsPutRequest
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsPutRequest) Execute() (*V2ObjectsWorkspacesRecordsPut200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsPutExecute(r)
}

/*
V2ObjectsWorkspacesRecordsPut Assert a workspace record

Use this endpoint to create or update workspace records, using a unique attribute to search for existing workspaces (for example the `workspace_id` attribute). If a workspace is found with the same value for the matching attribute, that workspace will be updated, otherwise a new workspace will be created instead. If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2ObjectsWorkspacesRecordsPutRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsPut(ctx context.Context) ApiV2ObjectsWorkspacesRecordsPutRequest {
	return ApiV2ObjectsWorkspacesRecordsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2ObjectsWorkspacesRecordsPut200Response
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsPutExecute(r ApiV2ObjectsWorkspacesRecordsPutRequest) (*V2ObjectsWorkspacesRecordsPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsWorkspacesRecordsPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.matchingAttribute == nil {
		return localVarReturnValue, nil, reportError("matchingAttribute is required and must be specified")
	}
	if r.v2ObjectsWorkspacesRecordsPutRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsWorkspacesRecordsPutRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "matching_attribute", r.matchingAttribute, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsWorkspacesRecordsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsPut404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsWorkspacesRecordsQueryPostRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	v2ObjectsWorkspacesRecordsQueryPostRequest *V2ObjectsWorkspacesRecordsQueryPostRequest
}

func (r ApiV2ObjectsWorkspacesRecordsQueryPostRequest) V2ObjectsWorkspacesRecordsQueryPostRequest(v2ObjectsWorkspacesRecordsQueryPostRequest V2ObjectsWorkspacesRecordsQueryPostRequest) ApiV2ObjectsWorkspacesRecordsQueryPostRequest {
	r.v2ObjectsWorkspacesRecordsQueryPostRequest = &v2ObjectsWorkspacesRecordsQueryPostRequest
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsQueryPostRequest) Execute() (*V2ObjectsWorkspacesRecordsQueryPost200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsQueryPostExecute(r)
}

/*
V2ObjectsWorkspacesRecordsQueryPost List workspace records

Lists workspace records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2ObjectsWorkspacesRecordsQueryPostRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsQueryPost(ctx context.Context) ApiV2ObjectsWorkspacesRecordsQueryPostRequest {
	return ApiV2ObjectsWorkspacesRecordsQueryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2ObjectsWorkspacesRecordsQueryPost200Response
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsQueryPostExecute(r ApiV2ObjectsWorkspacesRecordsQueryPostRequest) (*V2ObjectsWorkspacesRecordsQueryPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsWorkspacesRecordsQueryPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsQueryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2ObjectsWorkspacesRecordsQueryPostRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsWorkspacesRecordsQueryPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsWorkspacesRecordsQueryPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsQueryPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsQueryPost404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	recordId string
	attribute string
	showHistoric *bool
	limit *int32
	offset *int32
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest) ShowHistoric(showHistoric bool) ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest {
	r.showHistoric = &showHistoric
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest) Limit(limit int32) ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest) Offset(offset int32) ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest {
	r.offset = &offset
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest) Execute() (*V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGet200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetExecute(r)
}

/*
V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGet List workspace record attribute values

Gets all values for a given attribute on a workspace record. If the attribute is historic, this endpoint has the ability to return all historic values using the `show_historic` query param.

Required scopes: `record_permission:read`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @param attribute
 @return ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGet(ctx context.Context, recordId string, attribute string) ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest {
	return ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGet200Response
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetExecute(r ApiV2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGetRequest) (*V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsRecordIdAttributesAttributeValuesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records/{record_id}/attributes/{attribute}/values"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showHistoric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_historic", r.showHistoric, "form", "")
	} else {
		var defaultValue bool = false
		r.showHistoric = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsRecordIdAttributesAttributeValuesGet400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsRecordIdAttributesAttributeValuesGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsWorkspacesRecordsRecordIdDeleteRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	recordId string
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsRecordIdDeleteExecute(r)
}

/*
V2ObjectsWorkspacesRecordsRecordIdDelete Delete a workspace record

Deletes a single workspace record by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsWorkspacesRecordsRecordIdDeleteRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdDelete(ctx context.Context, recordId string) ApiV2ObjectsWorkspacesRecordsRecordIdDeleteRequest {
	return ApiV2ObjectsWorkspacesRecordsRecordIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdDeleteExecute(r ApiV2ObjectsWorkspacesRecordsRecordIdDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsRecordIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records/{record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsRecordIdGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	recordId string
	limit *int32
	offset *int32
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest) Limit(limit int32) ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest) Offset(offset int32) ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest {
	r.offset = &offset
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest) Execute() (*V2ObjectsPeopleRecordsRecordIdEntriesGet200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsRecordIdEntriesGetExecute(r)
}

/*
V2ObjectsWorkspacesRecordsRecordIdEntriesGet List workspace record entries

List all entries, across all lists, for which this workspace record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdEntriesGet(ctx context.Context, recordId string) ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest {
	return ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return V2ObjectsPeopleRecordsRecordIdEntriesGet200Response
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdEntriesGetExecute(r ApiV2ObjectsWorkspacesRecordsRecordIdEntriesGetRequest) (*V2ObjectsPeopleRecordsRecordIdEntriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsPeopleRecordsRecordIdEntriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsRecordIdEntriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records/{record_id}/entries"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsWorkspacesRecordsRecordIdGetRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	recordId string
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdGetRequest) Execute() (*V2ObjectsWorkspacesRecordsPut200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsRecordIdGetExecute(r)
}

/*
V2ObjectsWorkspacesRecordsRecordIdGet Get a workspace record

Gets a single workspace record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsWorkspacesRecordsRecordIdGetRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdGet(ctx context.Context, recordId string) ApiV2ObjectsWorkspacesRecordsRecordIdGetRequest {
	return ApiV2ObjectsWorkspacesRecordsRecordIdGetRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return V2ObjectsWorkspacesRecordsPut200Response
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdGetExecute(r ApiV2ObjectsWorkspacesRecordsRecordIdGetRequest) (*V2ObjectsWorkspacesRecordsPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsWorkspacesRecordsPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsRecordIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records/{record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsRecordIdGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest struct {
	ctx context.Context
	ApiService *WorkspacesAPIService
	recordId string
	v2ObjectsWorkspacesRecordsPutRequest *V2ObjectsWorkspacesRecordsPutRequest
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest) V2ObjectsWorkspacesRecordsPutRequest(v2ObjectsWorkspacesRecordsPutRequest V2ObjectsWorkspacesRecordsPutRequest) ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest {
	r.v2ObjectsWorkspacesRecordsPutRequest = &v2ObjectsWorkspacesRecordsPutRequest
	return r
}

func (r ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest) Execute() (*V2ObjectsWorkspacesRecordsPut200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsWorkspacesRecordsRecordIdPatchExecute(r)
}

/*
V2ObjectsWorkspacesRecordsRecordIdPatch Update a workspace Record

Use this endpoint to update workspace records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the [Assert workspace endpoint](/reference/put_v2-objects-workspaces-records) to overwrite or remove multiselect attribute values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest
*/
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdPatch(ctx context.Context, recordId string) ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest {
	return ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return V2ObjectsWorkspacesRecordsPut200Response
func (a *WorkspacesAPIService) V2ObjectsWorkspacesRecordsRecordIdPatchExecute(r ApiV2ObjectsWorkspacesRecordsRecordIdPatchRequest) (*V2ObjectsWorkspacesRecordsPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsWorkspacesRecordsPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspacesAPIService.V2ObjectsWorkspacesRecordsRecordIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/workspaces/records/{record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2ObjectsWorkspacesRecordsPutRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsWorkspacesRecordsPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsWorkspacesRecordsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsRecordIdPatch400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsPut404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
