/*
Attio Standard Objects

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CompaniesAPIService CompaniesAPI service
type CompaniesAPIService service

type ApiV2ObjectsCompaniesRecordsPostRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	v2ObjectsCompaniesRecordsPutRequest *V2ObjectsCompaniesRecordsPutRequest
}

func (r ApiV2ObjectsCompaniesRecordsPostRequest) V2ObjectsCompaniesRecordsPutRequest(v2ObjectsCompaniesRecordsPutRequest V2ObjectsCompaniesRecordsPutRequest) ApiV2ObjectsCompaniesRecordsPostRequest {
	r.v2ObjectsCompaniesRecordsPutRequest = &v2ObjectsCompaniesRecordsPutRequest
	return r
}

func (r ApiV2ObjectsCompaniesRecordsPostRequest) Execute() (*V2ObjectsCompaniesRecordsPost200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsPostExecute(r)
}

/*
V2ObjectsCompaniesRecordsPost Create a company record

Creates a new company record. This endpoint will throw on conflicts of unique attributes, like `domains`. If you would prefer to update company records on conflicts, please use the Assert company record endpoint instead. Please note, the `logo_url` attribute cannot currently be set via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2ObjectsCompaniesRecordsPostRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsPost(ctx context.Context) ApiV2ObjectsCompaniesRecordsPostRequest {
	return ApiV2ObjectsCompaniesRecordsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2ObjectsCompaniesRecordsPost200Response
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsPostExecute(r ApiV2ObjectsCompaniesRecordsPostRequest) (*V2ObjectsCompaniesRecordsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsCompaniesRecordsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2ObjectsCompaniesRecordsPutRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsCompaniesRecordsPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsCompaniesRecordsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsPut404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsCompaniesRecordsPutRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	matchingAttribute *string
	v2ObjectsCompaniesRecordsPutRequest *V2ObjectsCompaniesRecordsPutRequest
}

func (r ApiV2ObjectsCompaniesRecordsPutRequest) MatchingAttribute(matchingAttribute string) ApiV2ObjectsCompaniesRecordsPutRequest {
	r.matchingAttribute = &matchingAttribute
	return r
}

func (r ApiV2ObjectsCompaniesRecordsPutRequest) V2ObjectsCompaniesRecordsPutRequest(v2ObjectsCompaniesRecordsPutRequest V2ObjectsCompaniesRecordsPutRequest) ApiV2ObjectsCompaniesRecordsPutRequest {
	r.v2ObjectsCompaniesRecordsPutRequest = &v2ObjectsCompaniesRecordsPutRequest
	return r
}

func (r ApiV2ObjectsCompaniesRecordsPutRequest) Execute() (*V2ObjectsCompaniesRecordsPut200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsPutExecute(r)
}

/*
V2ObjectsCompaniesRecordsPut Assert a company record

Use this endpoint to create or update company records, using a unique attribute to search for existing companies (for example, the `domains` attribute). If a company is found with the same value for the matching attribute, that company will be updated. If no company with the same value for the matching attribute is found, a new company will be created instead. If you would like to avoid matching, please use the Create company endpoint.


If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2ObjectsCompaniesRecordsPutRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsPut(ctx context.Context) ApiV2ObjectsCompaniesRecordsPutRequest {
	return ApiV2ObjectsCompaniesRecordsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2ObjectsCompaniesRecordsPut200Response
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsPutExecute(r ApiV2ObjectsCompaniesRecordsPutRequest) (*V2ObjectsCompaniesRecordsPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsCompaniesRecordsPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.matchingAttribute == nil {
		return localVarReturnValue, nil, reportError("matchingAttribute is required and must be specified")
	}
	if r.v2ObjectsCompaniesRecordsPutRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsCompaniesRecordsPutRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "matching_attribute", r.matchingAttribute, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsCompaniesRecordsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsPut404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsCompaniesRecordsQueryPostRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	v2ObjectsCompaniesRecordsQueryPostRequest *V2ObjectsCompaniesRecordsQueryPostRequest
}

func (r ApiV2ObjectsCompaniesRecordsQueryPostRequest) V2ObjectsCompaniesRecordsQueryPostRequest(v2ObjectsCompaniesRecordsQueryPostRequest V2ObjectsCompaniesRecordsQueryPostRequest) ApiV2ObjectsCompaniesRecordsQueryPostRequest {
	r.v2ObjectsCompaniesRecordsQueryPostRequest = &v2ObjectsCompaniesRecordsQueryPostRequest
	return r
}

func (r ApiV2ObjectsCompaniesRecordsQueryPostRequest) Execute() (*V2ObjectsCompaniesRecordsQueryPost200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsQueryPostExecute(r)
}

/*
V2ObjectsCompaniesRecordsQueryPost List company records

Lists company records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2ObjectsCompaniesRecordsQueryPostRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsQueryPost(ctx context.Context) ApiV2ObjectsCompaniesRecordsQueryPostRequest {
	return ApiV2ObjectsCompaniesRecordsQueryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2ObjectsCompaniesRecordsQueryPost200Response
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsQueryPostExecute(r ApiV2ObjectsCompaniesRecordsQueryPostRequest) (*V2ObjectsCompaniesRecordsQueryPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsCompaniesRecordsQueryPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsQueryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2ObjectsCompaniesRecordsQueryPostRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsCompaniesRecordsQueryPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsCompaniesRecordsQueryPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsQueryPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsQueryPost404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	recordId string
	attribute string
	showHistoric *bool
	limit *int32
	offset *int32
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest) ShowHistoric(showHistoric bool) ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest {
	r.showHistoric = &showHistoric
	return r
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest) Limit(limit int32) ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest) Offset(offset int32) ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest {
	r.offset = &offset
	return r
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest) Execute() (*V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGet200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetExecute(r)
}

/*
V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGet List company record attribute values

Gets all values for a given attribute on a company record. If the attribute is historic, this endpoint has the ability to return all historic values using the `show_historic` query param.

Required scopes: `record_permission:read`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @param attribute
 @return ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGet(ctx context.Context, recordId string, attribute string) ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest {
	return ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGet200Response
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetExecute(r ApiV2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGetRequest) (*V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsRecordIdAttributesAttributeValuesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records/{record_id}/attributes/{attribute}/values"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showHistoric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_historic", r.showHistoric, "form", "")
	} else {
		var defaultValue bool = false
		r.showHistoric = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsRecordIdAttributesAttributeValuesGet400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsRecordIdAttributesAttributeValuesGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsCompaniesRecordsRecordIdDeleteRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	recordId string
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsRecordIdDeleteExecute(r)
}

/*
V2ObjectsCompaniesRecordsRecordIdDelete Delete a company record

Deletes a single company record by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsCompaniesRecordsRecordIdDeleteRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdDelete(ctx context.Context, recordId string) ApiV2ObjectsCompaniesRecordsRecordIdDeleteRequest {
	return ApiV2ObjectsCompaniesRecordsRecordIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdDeleteExecute(r ApiV2ObjectsCompaniesRecordsRecordIdDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsRecordIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records/{record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsRecordIdGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	recordId string
	limit *int32
	offset *int32
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest) Limit(limit int32) ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest) Offset(offset int32) ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest {
	r.offset = &offset
	return r
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest) Execute() (*V2ObjectsCompaniesRecordsRecordIdEntriesGet200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsRecordIdEntriesGetExecute(r)
}

/*
V2ObjectsCompaniesRecordsRecordIdEntriesGet List company record entries

List all entries, across all lists, for which this company record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdEntriesGet(ctx context.Context, recordId string) ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest {
	return ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return V2ObjectsCompaniesRecordsRecordIdEntriesGet200Response
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdEntriesGetExecute(r ApiV2ObjectsCompaniesRecordsRecordIdEntriesGetRequest) (*V2ObjectsCompaniesRecordsRecordIdEntriesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsCompaniesRecordsRecordIdEntriesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsRecordIdEntriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records/{record_id}/entries"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsCompaniesRecordsRecordIdGetRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	recordId string
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdGetRequest) Execute() (*V2ObjectsCompaniesRecordsPut200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsRecordIdGetExecute(r)
}

/*
V2ObjectsCompaniesRecordsRecordIdGet Get a company record

Gets a single company record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsCompaniesRecordsRecordIdGetRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdGet(ctx context.Context, recordId string) ApiV2ObjectsCompaniesRecordsRecordIdGetRequest {
	return ApiV2ObjectsCompaniesRecordsRecordIdGetRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return V2ObjectsCompaniesRecordsPut200Response
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdGetExecute(r ApiV2ObjectsCompaniesRecordsRecordIdGetRequest) (*V2ObjectsCompaniesRecordsPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsCompaniesRecordsPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsRecordIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records/{record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsRecordIdGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest struct {
	ctx context.Context
	ApiService *CompaniesAPIService
	recordId string
	v2ObjectsCompaniesRecordsPutRequest *V2ObjectsCompaniesRecordsPutRequest
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest) V2ObjectsCompaniesRecordsPutRequest(v2ObjectsCompaniesRecordsPutRequest V2ObjectsCompaniesRecordsPutRequest) ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest {
	r.v2ObjectsCompaniesRecordsPutRequest = &v2ObjectsCompaniesRecordsPutRequest
	return r
}

func (r ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest) Execute() (*V2ObjectsCompaniesRecordsPut200Response, *http.Response, error) {
	return r.ApiService.V2ObjectsCompaniesRecordsRecordIdPatchExecute(r)
}

/*
V2ObjectsCompaniesRecordsRecordIdPatch Update a company record

Use this endpoint to update company records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the [Assert company endpoint](/reference/put_v2-objects-companies-records) to overwrite or remove multiselect attribute values. Please note, the `logo_url` attribute cannot currently be updated via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId
 @return ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest
*/
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdPatch(ctx context.Context, recordId string) ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest {
	return ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return V2ObjectsCompaniesRecordsPut200Response
func (a *CompaniesAPIService) V2ObjectsCompaniesRecordsRecordIdPatchExecute(r ApiV2ObjectsCompaniesRecordsRecordIdPatchRequest) (*V2ObjectsCompaniesRecordsPut200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2ObjectsCompaniesRecordsPut200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompaniesAPIService.V2ObjectsCompaniesRecordsRecordIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/objects/companies/records/{record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"record_id"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2ObjectsCompaniesRecordsPutRequest == nil {
		return localVarReturnValue, nil, reportError("v2ObjectsCompaniesRecordsPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2ObjectsCompaniesRecordsPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2ObjectsPeopleRecordsRecordIdPatch400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2ObjectsPeopleRecordsPut404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
