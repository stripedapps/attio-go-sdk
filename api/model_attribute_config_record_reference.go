/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AttributeConfigRecordReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeConfigRecordReference{}

// AttributeConfigRecordReference Configuration available for attributes of type \"record-reference\".
type AttributeConfigRecordReference struct {
	// A list of UUIDs to indicate which objects records are allowed to belong to. Leave empty to to allow records from all object types.
	AllowedObjectIds []string `json:"allowed_object_ids"`
}

type _AttributeConfigRecordReference AttributeConfigRecordReference

// NewAttributeConfigRecordReference instantiates a new AttributeConfigRecordReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeConfigRecordReference(allowedObjectIds []string) *AttributeConfigRecordReference {
	this := AttributeConfigRecordReference{}
	this.AllowedObjectIds = allowedObjectIds
	return &this
}

// NewAttributeConfigRecordReferenceWithDefaults instantiates a new AttributeConfigRecordReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeConfigRecordReferenceWithDefaults() *AttributeConfigRecordReference {
	this := AttributeConfigRecordReference{}
	return &this
}

// GetAllowedObjectIds returns the AllowedObjectIds field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *AttributeConfigRecordReference) GetAllowedObjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedObjectIds
}

// GetAllowedObjectIdsOk returns a tuple with the AllowedObjectIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeConfigRecordReference) GetAllowedObjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedObjectIds) {
		return nil, false
	}
	return o.AllowedObjectIds, true
}

// SetAllowedObjectIds sets field value
func (o *AttributeConfigRecordReference) SetAllowedObjectIds(v []string) {
	o.AllowedObjectIds = v
}

func (o AttributeConfigRecordReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeConfigRecordReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedObjectIds != nil {
		toSerialize["allowed_object_ids"] = o.AllowedObjectIds
	}
	return toSerialize, nil
}

func (o *AttributeConfigRecordReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowed_object_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttributeConfigRecordReference := _AttributeConfigRecordReference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttributeConfigRecordReference)

	if err != nil {
		return err
	}

	*o = AttributeConfigRecordReference(varAttributeConfigRecordReference)

	return err
}

type NullableAttributeConfigRecordReference struct {
	value *AttributeConfigRecordReference
	isSet bool
}

func (v NullableAttributeConfigRecordReference) Get() *AttributeConfigRecordReference {
	return v.value
}

func (v *NullableAttributeConfigRecordReference) Set(val *AttributeConfigRecordReference) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeConfigRecordReference) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeConfigRecordReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeConfigRecordReference(val *AttributeConfigRecordReference) *NullableAttributeConfigRecordReference {
	return &NullableAttributeConfigRecordReference{value: val, isSet: true}
}

func (v NullableAttributeConfigRecordReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeConfigRecordReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


