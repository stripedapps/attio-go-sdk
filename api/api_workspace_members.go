/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkspaceMembersAPIService WorkspaceMembersAPI service
type WorkspaceMembersAPIService service

type ApiV2WorkspaceMembersGetRequest struct {
	ctx context.Context
	ApiService *WorkspaceMembersAPIService
}

func (r ApiV2WorkspaceMembersGetRequest) Execute() (*V2WorkspaceMembersGet200Response, *http.Response, error) {
	return r.ApiService.V2WorkspaceMembersGetExecute(r)
}

/*
V2WorkspaceMembersGet List workspace members

Lists all workspace members in the workspace.

Required scopes: `user_management:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2WorkspaceMembersGetRequest
*/
func (a *WorkspaceMembersAPIService) V2WorkspaceMembersGet(ctx context.Context) ApiV2WorkspaceMembersGetRequest {
	return ApiV2WorkspaceMembersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2WorkspaceMembersGet200Response
func (a *WorkspaceMembersAPIService) V2WorkspaceMembersGetExecute(r ApiV2WorkspaceMembersGetRequest) (*V2WorkspaceMembersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2WorkspaceMembersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceMembersAPIService.V2WorkspaceMembersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/workspace_members"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2WorkspaceMembersWorkspaceMemberIdGetRequest struct {
	ctx context.Context
	ApiService *WorkspaceMembersAPIService
	workspaceMemberId string
}

func (r ApiV2WorkspaceMembersWorkspaceMemberIdGetRequest) Execute() (*V2WorkspaceMembersWorkspaceMemberIdGet200Response, *http.Response, error) {
	return r.ApiService.V2WorkspaceMembersWorkspaceMemberIdGetExecute(r)
}

/*
V2WorkspaceMembersWorkspaceMemberIdGet Get a workspace member

Gets a single workspace member by ID.

Required scopes: `user_management:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspaceMemberId
 @return ApiV2WorkspaceMembersWorkspaceMemberIdGetRequest
*/
func (a *WorkspaceMembersAPIService) V2WorkspaceMembersWorkspaceMemberIdGet(ctx context.Context, workspaceMemberId string) ApiV2WorkspaceMembersWorkspaceMemberIdGetRequest {
	return ApiV2WorkspaceMembersWorkspaceMemberIdGetRequest{
		ApiService: a,
		ctx: ctx,
		workspaceMemberId: workspaceMemberId,
	}
}

// Execute executes the request
//  @return V2WorkspaceMembersWorkspaceMemberIdGet200Response
func (a *WorkspaceMembersAPIService) V2WorkspaceMembersWorkspaceMemberIdGetExecute(r ApiV2WorkspaceMembersWorkspaceMemberIdGetRequest) (*V2WorkspaceMembersWorkspaceMemberIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2WorkspaceMembersWorkspaceMemberIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkspaceMembersAPIService.V2WorkspaceMembersWorkspaceMemberIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/workspace_members/{workspace_member_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_member_id"+"}", url.PathEscape(parameterValueToString(r.workspaceMemberId, "workspaceMemberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2WorkspaceMembersWorkspaceMemberIdGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
