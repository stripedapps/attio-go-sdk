/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AttributeConfigCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeConfigCurrency{}

// AttributeConfigCurrency Configuration available for attributes of type \"currency\".
type AttributeConfigCurrency struct {
	// The ISO4217 code representing the currency that values for this attribute should be stored in.
	DefaultCurrencyCode NullableString `json:"default_currency_code"`
	// How the currency should be displayed across the app. \"code\" will display the ISO currency code e.g. \"USD\", \"name\" will display the localized currency name e.g. \"British pound\", \"narrowSymbol\" will display \"$1\" instead of \"US$1\" and \"symbol\" will display a localized currency symbol such as \"$\".
	DisplayType NullableString `json:"display_type"`
}

type _AttributeConfigCurrency AttributeConfigCurrency

// NewAttributeConfigCurrency instantiates a new AttributeConfigCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeConfigCurrency(defaultCurrencyCode NullableString, displayType NullableString) *AttributeConfigCurrency {
	this := AttributeConfigCurrency{}
	this.DefaultCurrencyCode = defaultCurrencyCode
	this.DisplayType = displayType
	return &this
}

// NewAttributeConfigCurrencyWithDefaults instantiates a new AttributeConfigCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeConfigCurrencyWithDefaults() *AttributeConfigCurrency {
	this := AttributeConfigCurrency{}
	return &this
}

// GetDefaultCurrencyCode returns the DefaultCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AttributeConfigCurrency) GetDefaultCurrencyCode() string {
	if o == nil || o.DefaultCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.DefaultCurrencyCode.Get()
}

// GetDefaultCurrencyCodeOk returns a tuple with the DefaultCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeConfigCurrency) GetDefaultCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultCurrencyCode.Get(), o.DefaultCurrencyCode.IsSet()
}

// SetDefaultCurrencyCode sets field value
func (o *AttributeConfigCurrency) SetDefaultCurrencyCode(v string) {
	o.DefaultCurrencyCode.Set(&v)
}

// GetDisplayType returns the DisplayType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AttributeConfigCurrency) GetDisplayType() string {
	if o == nil || o.DisplayType.Get() == nil {
		var ret string
		return ret
	}

	return *o.DisplayType.Get()
}

// GetDisplayTypeOk returns a tuple with the DisplayType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeConfigCurrency) GetDisplayTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayType.Get(), o.DisplayType.IsSet()
}

// SetDisplayType sets field value
func (o *AttributeConfigCurrency) SetDisplayType(v string) {
	o.DisplayType.Set(&v)
}

func (o AttributeConfigCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeConfigCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["default_currency_code"] = o.DefaultCurrencyCode.Get()
	toSerialize["display_type"] = o.DisplayType.Get()
	return toSerialize, nil
}

func (o *AttributeConfigCurrency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default_currency_code",
		"display_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttributeConfigCurrency := _AttributeConfigCurrency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttributeConfigCurrency)

	if err != nil {
		return err
	}

	*o = AttributeConfigCurrency(varAttributeConfigCurrency)

	return err
}

type NullableAttributeConfigCurrency struct {
	value *AttributeConfigCurrency
	isSet bool
}

func (v NullableAttributeConfigCurrency) Get() *AttributeConfigCurrency {
	return v.value
}

func (v *NullableAttributeConfigCurrency) Set(val *AttributeConfigCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeConfigCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeConfigCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeConfigCurrency(val *AttributeConfigCurrency) *NullableAttributeConfigCurrency {
	return &NullableAttributeConfigCurrency{value: val, isSet: true}
}

func (v NullableAttributeConfigCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeConfigCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


