/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommentRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentRecord{}

// CommentRecord The record the comment belongs to.
type CommentRecord struct {
	// The ID of the record the comment belongs to.
	RecordId string `json:"record_id"`
	// The ID of the object the record belongs to.
	ObjectId string `json:"object_id"`
}

type _CommentRecord CommentRecord

// NewCommentRecord instantiates a new CommentRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentRecord(recordId string, objectId string) *CommentRecord {
	this := CommentRecord{}
	this.RecordId = recordId
	this.ObjectId = objectId
	return &this
}

// NewCommentRecordWithDefaults instantiates a new CommentRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentRecordWithDefaults() *CommentRecord {
	this := CommentRecord{}
	return &this
}

// GetRecordId returns the RecordId field value
func (o *CommentRecord) GetRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value
// and a boolean to check if the value has been set.
func (o *CommentRecord) GetRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordId, true
}

// SetRecordId sets field value
func (o *CommentRecord) SetRecordId(v string) {
	o.RecordId = v
}

// GetObjectId returns the ObjectId field value
func (o *CommentRecord) GetObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *CommentRecord) GetObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *CommentRecord) SetObjectId(v string) {
	o.ObjectId = v
}

func (o CommentRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["record_id"] = o.RecordId
	toSerialize["object_id"] = o.ObjectId
	return toSerialize, nil
}

func (o *CommentRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"record_id",
		"object_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommentRecord := _CommentRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommentRecord)

	if err != nil {
		return err
	}

	*o = CommentRecord(varCommentRecord)

	return err
}

type NullableCommentRecord struct {
	value *CommentRecord
	isSet bool
}

func (v NullableCommentRecord) Get() *CommentRecord {
	return v.value
}

func (v *NullableCommentRecord) Set(val *CommentRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentRecord(val *CommentRecord) *NullableCommentRecord {
	return &NullableCommentRecord{value: val, isSet: true}
}

func (v NullableCommentRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


