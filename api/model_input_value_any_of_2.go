/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InputValueAnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputValueAnyOf2{}

// InputValueAnyOf2 struct for InputValueAnyOf2
type InputValueAnyOf2 struct {
	// A boolean representing whether the checkbox is checked or not. The string values 'true' and 'false' are also accepted.
	Value bool `json:"value"`
}

type _InputValueAnyOf2 InputValueAnyOf2

// NewInputValueAnyOf2 instantiates a new InputValueAnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputValueAnyOf2(value bool) *InputValueAnyOf2 {
	this := InputValueAnyOf2{}
	this.Value = value
	return &this
}

// NewInputValueAnyOf2WithDefaults instantiates a new InputValueAnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputValueAnyOf2WithDefaults() *InputValueAnyOf2 {
	this := InputValueAnyOf2{}
	return &this
}

// GetValue returns the Value field value
func (o *InputValueAnyOf2) GetValue() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *InputValueAnyOf2) GetValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *InputValueAnyOf2) SetValue(v bool) {
	o.Value = v
}

func (o InputValueAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputValueAnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *InputValueAnyOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInputValueAnyOf2 := _InputValueAnyOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputValueAnyOf2)

	if err != nil {
		return err
	}

	*o = InputValueAnyOf2(varInputValueAnyOf2)

	return err
}

type NullableInputValueAnyOf2 struct {
	value *InputValueAnyOf2
	isSet bool
}

func (v NullableInputValueAnyOf2) Get() *InputValueAnyOf2 {
	return v.value
}

func (v *NullableInputValueAnyOf2) Set(val *InputValueAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableInputValueAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableInputValueAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputValueAnyOf2(val *InputValueAnyOf2) *NullableInputValueAnyOf2 {
	return &NullableInputValueAnyOf2{value: val, isSet: true}
}

func (v NullableInputValueAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputValueAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


