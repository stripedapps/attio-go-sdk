/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommentEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentEntry{}

// CommentEntry The entry the comment belongs to, `null` for comments on records.
type CommentEntry struct {
	// The ID of the entry the comment belongs to.
	EntryId string `json:"entry_id"`
	// The ID of the list the entry belongs to.
	ListId string `json:"list_id"`
}

type _CommentEntry CommentEntry

// NewCommentEntry instantiates a new CommentEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentEntry(entryId string, listId string) *CommentEntry {
	this := CommentEntry{}
	this.EntryId = entryId
	this.ListId = listId
	return &this
}

// NewCommentEntryWithDefaults instantiates a new CommentEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentEntryWithDefaults() *CommentEntry {
	this := CommentEntry{}
	return &this
}

// GetEntryId returns the EntryId field value
func (o *CommentEntry) GetEntryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryId
}

// GetEntryIdOk returns a tuple with the EntryId field value
// and a boolean to check if the value has been set.
func (o *CommentEntry) GetEntryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryId, true
}

// SetEntryId sets field value
func (o *CommentEntry) SetEntryId(v string) {
	o.EntryId = v
}

// GetListId returns the ListId field value
func (o *CommentEntry) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *CommentEntry) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *CommentEntry) SetListId(v string) {
	o.ListId = v
}

func (o CommentEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entry_id"] = o.EntryId
	toSerialize["list_id"] = o.ListId
	return toSerialize, nil
}

func (o *CommentEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entry_id",
		"list_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommentEntry := _CommentEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommentEntry)

	if err != nil {
		return err
	}

	*o = CommentEntry(varCommentEntry)

	return err
}

type NullableCommentEntry struct {
	value *CommentEntry
	isSet bool
}

func (v NullableCommentEntry) Get() *CommentEntry {
	return v.value
}

func (v *NullableCommentEntry) Set(val *CommentEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentEntry(val *CommentEntry) *NullableCommentEntry {
	return &NullableCommentEntry{value: val, isSet: true}
}

func (v NullableCommentEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


