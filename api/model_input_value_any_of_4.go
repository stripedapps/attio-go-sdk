/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InputValueAnyOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputValueAnyOf4{}

// InputValueAnyOf4 struct for InputValueAnyOf4
type InputValueAnyOf4 struct {
	// A date represents a single calendar year, month and day, independent of timezone. If hours, months, seconds or timezones are provided, they will be trimmed. For example, \"2023\" and \"2023-01\" will be coerced into \"2023-01-01\", and \"2023-01-02\", \"2023-01-02T13:00\", \"2023-01-02T14:00:00\", \"2023-01-02T15:00:00.000000000\", and \"2023-01-02T15:00:00.000000000+02:00\" will all be coerced to \"2023-01-02\". If a timezone is provided that would result in a different calendar date in UTC, the date will be coerced to UTC and then the timezone component will be trimmed. For example, the value \"2023-01-02T23:00:00-10:00\" will be returned as \"2023-01-03\". The maximum date is \"9999-12-31\".
	Value string `json:"value"`
}

type _InputValueAnyOf4 InputValueAnyOf4

// NewInputValueAnyOf4 instantiates a new InputValueAnyOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputValueAnyOf4(value string) *InputValueAnyOf4 {
	this := InputValueAnyOf4{}
	this.Value = value
	return &this
}

// NewInputValueAnyOf4WithDefaults instantiates a new InputValueAnyOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputValueAnyOf4WithDefaults() *InputValueAnyOf4 {
	this := InputValueAnyOf4{}
	return &this
}

// GetValue returns the Value field value
func (o *InputValueAnyOf4) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *InputValueAnyOf4) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *InputValueAnyOf4) SetValue(v string) {
	o.Value = v
}

func (o InputValueAnyOf4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputValueAnyOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *InputValueAnyOf4) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInputValueAnyOf4 := _InputValueAnyOf4{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputValueAnyOf4)

	if err != nil {
		return err
	}

	*o = InputValueAnyOf4(varInputValueAnyOf4)

	return err
}

type NullableInputValueAnyOf4 struct {
	value *InputValueAnyOf4
	isSet bool
}

func (v NullableInputValueAnyOf4) Get() *InputValueAnyOf4 {
	return v.value
}

func (v *NullableInputValueAnyOf4) Set(val *InputValueAnyOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableInputValueAnyOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableInputValueAnyOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputValueAnyOf4(val *InputValueAnyOf4) *NullableInputValueAnyOf4 {
	return &NullableInputValueAnyOf4{value: val, isSet: true}
}

func (v NullableInputValueAnyOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputValueAnyOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


