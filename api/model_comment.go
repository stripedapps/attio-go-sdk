/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment struct for Comment
type Comment struct {
	Id CommentId `json:"id"`
	// The ID of the thread the comment belongs to.
	ThreadId string `json:"thread_id"`
	// A plaintext representation of the content of the comment. References to workspace members are cast into email addresses, all other stylistic elements are removed.
	ContentPlaintext string `json:"content_plaintext"`
	Entry CommentEntry `json:"entry"`
	Record CommentRecord `json:"record"`
	// Whether the comment is resolved.
	ResolvedAt NullableString `json:"resolved_at"`
	ResolvedBy CommentResolvedBy `json:"resolved_by"`
	// When the note was created.
	CreatedAt string `json:"created_at"`
	Author CommentAuthor `json:"author"`
}

type _Comment Comment

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment(id CommentId, threadId string, contentPlaintext string, entry CommentEntry, record CommentRecord, resolvedAt NullableString, resolvedBy CommentResolvedBy, createdAt string, author CommentAuthor) *Comment {
	this := Comment{}
	this.Id = id
	this.ThreadId = threadId
	this.ContentPlaintext = contentPlaintext
	this.Entry = entry
	this.Record = record
	this.ResolvedAt = resolvedAt
	this.ResolvedBy = resolvedBy
	this.CreatedAt = createdAt
	this.Author = author
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetId returns the Id field value
func (o *Comment) GetId() CommentId {
	if o == nil {
		var ret CommentId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*CommentId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Comment) SetId(v CommentId) {
	o.Id = v
}

// GetThreadId returns the ThreadId field value
func (o *Comment) GetThreadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value
// and a boolean to check if the value has been set.
func (o *Comment) GetThreadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThreadId, true
}

// SetThreadId sets field value
func (o *Comment) SetThreadId(v string) {
	o.ThreadId = v
}

// GetContentPlaintext returns the ContentPlaintext field value
func (o *Comment) GetContentPlaintext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentPlaintext
}

// GetContentPlaintextOk returns a tuple with the ContentPlaintext field value
// and a boolean to check if the value has been set.
func (o *Comment) GetContentPlaintextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentPlaintext, true
}

// SetContentPlaintext sets field value
func (o *Comment) SetContentPlaintext(v string) {
	o.ContentPlaintext = v
}

// GetEntry returns the Entry field value
func (o *Comment) GetEntry() CommentEntry {
	if o == nil {
		var ret CommentEntry
		return ret
	}

	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value
// and a boolean to check if the value has been set.
func (o *Comment) GetEntryOk() (*CommentEntry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entry, true
}

// SetEntry sets field value
func (o *Comment) SetEntry(v CommentEntry) {
	o.Entry = v
}

// GetRecord returns the Record field value
func (o *Comment) GetRecord() CommentRecord {
	if o == nil {
		var ret CommentRecord
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *Comment) GetRecordOk() (*CommentRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *Comment) SetRecord(v CommentRecord) {
	o.Record = v
}

// GetResolvedAt returns the ResolvedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Comment) GetResolvedAt() string {
	if o == nil || o.ResolvedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ResolvedAt.Get()
}

// GetResolvedAtOk returns a tuple with the ResolvedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Comment) GetResolvedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolvedAt.Get(), o.ResolvedAt.IsSet()
}

// SetResolvedAt sets field value
func (o *Comment) SetResolvedAt(v string) {
	o.ResolvedAt.Set(&v)
}

// GetResolvedBy returns the ResolvedBy field value
func (o *Comment) GetResolvedBy() CommentResolvedBy {
	if o == nil {
		var ret CommentResolvedBy
		return ret
	}

	return o.ResolvedBy
}

// GetResolvedByOk returns a tuple with the ResolvedBy field value
// and a boolean to check if the value has been set.
func (o *Comment) GetResolvedByOk() (*CommentResolvedBy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResolvedBy, true
}

// SetResolvedBy sets field value
func (o *Comment) SetResolvedBy(v CommentResolvedBy) {
	o.ResolvedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Comment) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Comment) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetAuthor returns the Author field value
func (o *Comment) GetAuthor() CommentAuthor {
	if o == nil {
		var ret CommentAuthor
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *Comment) GetAuthorOk() (*CommentAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *Comment) SetAuthor(v CommentAuthor) {
	o.Author = v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["thread_id"] = o.ThreadId
	toSerialize["content_plaintext"] = o.ContentPlaintext
	toSerialize["entry"] = o.Entry
	toSerialize["record"] = o.Record
	toSerialize["resolved_at"] = o.ResolvedAt.Get()
	toSerialize["resolved_by"] = o.ResolvedBy
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["author"] = o.Author
	return toSerialize, nil
}

func (o *Comment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"thread_id",
		"content_plaintext",
		"entry",
		"record",
		"resolved_at",
		"resolved_by",
		"created_at",
		"author",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComment := _Comment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComment)

	if err != nil {
		return err
	}

	*o = Comment(varComment)

	return err
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


