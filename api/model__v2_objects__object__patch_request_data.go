/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V2ObjectsObjectPatchRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2ObjectsObjectPatchRequestData{}

// V2ObjectsObjectPatchRequestData struct for V2ObjectsObjectPatchRequestData
type V2ObjectsObjectPatchRequestData struct {
	// A unique, human-readable slug to access the object through URLs and API calls. Should be formatted in snake case.
	ApiSlug *string `json:"api_slug,omitempty"`
	// The singular form of the object's name.
	SingularNoun *string `json:"singular_noun,omitempty"`
	// The plural form of the object's name.
	PluralNoun *string `json:"plural_noun,omitempty"`
}

// NewV2ObjectsObjectPatchRequestData instantiates a new V2ObjectsObjectPatchRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2ObjectsObjectPatchRequestData() *V2ObjectsObjectPatchRequestData {
	this := V2ObjectsObjectPatchRequestData{}
	return &this
}

// NewV2ObjectsObjectPatchRequestDataWithDefaults instantiates a new V2ObjectsObjectPatchRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2ObjectsObjectPatchRequestDataWithDefaults() *V2ObjectsObjectPatchRequestData {
	this := V2ObjectsObjectPatchRequestData{}
	return &this
}

// GetApiSlug returns the ApiSlug field value if set, zero value otherwise.
func (o *V2ObjectsObjectPatchRequestData) GetApiSlug() string {
	if o == nil || IsNil(o.ApiSlug) {
		var ret string
		return ret
	}
	return *o.ApiSlug
}

// GetApiSlugOk returns a tuple with the ApiSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ObjectsObjectPatchRequestData) GetApiSlugOk() (*string, bool) {
	if o == nil || IsNil(o.ApiSlug) {
		return nil, false
	}
	return o.ApiSlug, true
}

// HasApiSlug returns a boolean if a field has been set.
func (o *V2ObjectsObjectPatchRequestData) HasApiSlug() bool {
	if o != nil && !IsNil(o.ApiSlug) {
		return true
	}

	return false
}

// SetApiSlug gets a reference to the given string and assigns it to the ApiSlug field.
func (o *V2ObjectsObjectPatchRequestData) SetApiSlug(v string) {
	o.ApiSlug = &v
}

// GetSingularNoun returns the SingularNoun field value if set, zero value otherwise.
func (o *V2ObjectsObjectPatchRequestData) GetSingularNoun() string {
	if o == nil || IsNil(o.SingularNoun) {
		var ret string
		return ret
	}
	return *o.SingularNoun
}

// GetSingularNounOk returns a tuple with the SingularNoun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ObjectsObjectPatchRequestData) GetSingularNounOk() (*string, bool) {
	if o == nil || IsNil(o.SingularNoun) {
		return nil, false
	}
	return o.SingularNoun, true
}

// HasSingularNoun returns a boolean if a field has been set.
func (o *V2ObjectsObjectPatchRequestData) HasSingularNoun() bool {
	if o != nil && !IsNil(o.SingularNoun) {
		return true
	}

	return false
}

// SetSingularNoun gets a reference to the given string and assigns it to the SingularNoun field.
func (o *V2ObjectsObjectPatchRequestData) SetSingularNoun(v string) {
	o.SingularNoun = &v
}

// GetPluralNoun returns the PluralNoun field value if set, zero value otherwise.
func (o *V2ObjectsObjectPatchRequestData) GetPluralNoun() string {
	if o == nil || IsNil(o.PluralNoun) {
		var ret string
		return ret
	}
	return *o.PluralNoun
}

// GetPluralNounOk returns a tuple with the PluralNoun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ObjectsObjectPatchRequestData) GetPluralNounOk() (*string, bool) {
	if o == nil || IsNil(o.PluralNoun) {
		return nil, false
	}
	return o.PluralNoun, true
}

// HasPluralNoun returns a boolean if a field has been set.
func (o *V2ObjectsObjectPatchRequestData) HasPluralNoun() bool {
	if o != nil && !IsNil(o.PluralNoun) {
		return true
	}

	return false
}

// SetPluralNoun gets a reference to the given string and assigns it to the PluralNoun field.
func (o *V2ObjectsObjectPatchRequestData) SetPluralNoun(v string) {
	o.PluralNoun = &v
}

func (o V2ObjectsObjectPatchRequestData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2ObjectsObjectPatchRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiSlug) {
		toSerialize["api_slug"] = o.ApiSlug
	}
	if !IsNil(o.SingularNoun) {
		toSerialize["singular_noun"] = o.SingularNoun
	}
	if !IsNil(o.PluralNoun) {
		toSerialize["plural_noun"] = o.PluralNoun
	}
	return toSerialize, nil
}

type NullableV2ObjectsObjectPatchRequestData struct {
	value *V2ObjectsObjectPatchRequestData
	isSet bool
}

func (v NullableV2ObjectsObjectPatchRequestData) Get() *V2ObjectsObjectPatchRequestData {
	return v.value
}

func (v *NullableV2ObjectsObjectPatchRequestData) Set(val *V2ObjectsObjectPatchRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableV2ObjectsObjectPatchRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableV2ObjectsObjectPatchRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2ObjectsObjectPatchRequestData(val *V2ObjectsObjectPatchRequestData) *NullableV2ObjectsObjectPatchRequestData {
	return &NullableV2ObjectsObjectPatchRequestData{value: val, isSet: true}
}

func (v NullableV2ObjectsObjectPatchRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2ObjectsObjectPatchRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


