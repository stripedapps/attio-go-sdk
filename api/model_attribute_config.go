/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AttributeConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeConfig{}

// AttributeConfig Additional, type-dependent configuration for the attribute.
type AttributeConfig struct {
	Currency AttributeConfigCurrency `json:"currency"`
	RecordReference AttributeConfigRecordReference `json:"record_reference"`
}

type _AttributeConfig AttributeConfig

// NewAttributeConfig instantiates a new AttributeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeConfig(currency AttributeConfigCurrency, recordReference AttributeConfigRecordReference) *AttributeConfig {
	this := AttributeConfig{}
	this.Currency = currency
	this.RecordReference = recordReference
	return &this
}

// NewAttributeConfigWithDefaults instantiates a new AttributeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeConfigWithDefaults() *AttributeConfig {
	this := AttributeConfig{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *AttributeConfig) GetCurrency() AttributeConfigCurrency {
	if o == nil {
		var ret AttributeConfigCurrency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *AttributeConfig) GetCurrencyOk() (*AttributeConfigCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *AttributeConfig) SetCurrency(v AttributeConfigCurrency) {
	o.Currency = v
}

// GetRecordReference returns the RecordReference field value
func (o *AttributeConfig) GetRecordReference() AttributeConfigRecordReference {
	if o == nil {
		var ret AttributeConfigRecordReference
		return ret
	}

	return o.RecordReference
}

// GetRecordReferenceOk returns a tuple with the RecordReference field value
// and a boolean to check if the value has been set.
func (o *AttributeConfig) GetRecordReferenceOk() (*AttributeConfigRecordReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordReference, true
}

// SetRecordReference sets field value
func (o *AttributeConfig) SetRecordReference(v AttributeConfigRecordReference) {
	o.RecordReference = v
}

func (o AttributeConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["record_reference"] = o.RecordReference
	return toSerialize, nil
}

func (o *AttributeConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"record_reference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttributeConfig := _AttributeConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttributeConfig)

	if err != nil {
		return err
	}

	*o = AttributeConfig(varAttributeConfig)

	return err
}

type NullableAttributeConfig struct {
	value *AttributeConfig
	isSet bool
}

func (v NullableAttributeConfig) Get() *AttributeConfig {
	return v.value
}

func (v *NullableAttributeConfig) Set(val *AttributeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeConfig(val *AttributeConfig) *NullableAttributeConfig {
	return &NullableAttributeConfig{value: val, isSet: true}
}

func (v NullableAttributeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


