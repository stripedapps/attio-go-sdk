/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AttributesAPIService AttributesAPI service
type AttributesAPIService service

type ApiV2TargetIdentifierAttributesAttributeGetRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
}

func (r ApiV2TargetIdentifierAttributesAttributeGetRequest) Execute() (*V2TargetIdentifierAttributesPost200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributeGetExecute(r)
}

/*
V2TargetIdentifierAttributesAttributeGet Get an attribute

Gets information about a single attribute on either an object or a list.

Required scopes: `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @return ApiV2TargetIdentifierAttributesAttributeGetRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeGet(ctx context.Context, target string, identifier string, attribute string) ApiV2TargetIdentifierAttributesAttributeGetRequest {
	return ApiV2TargetIdentifierAttributesAttributeGetRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesPost200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeGetExecute(r ApiV2TargetIdentifierAttributesAttributeGetRequest) (*V2TargetIdentifierAttributesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
	showArchived *bool
}

func (r ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest) ShowArchived(showArchived bool) ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest {
	r.showArchived = &showArchived
	return r
}

func (r ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest) Execute() (*V2TargetIdentifierAttributesAttributeOptionsGet200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributeOptionsGetExecute(r)
}

/*
V2TargetIdentifierAttributesAttributeOptionsGet List select options

Lists all select options for a particular attribute on either an object or a list.

Required scopes: `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @return ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeOptionsGet(ctx context.Context, target string, identifier string, attribute string) ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest {
	return ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesAttributeOptionsGet200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeOptionsGetExecute(r ApiV2TargetIdentifierAttributesAttributeOptionsGetRequest) (*V2TargetIdentifierAttributesAttributeOptionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesAttributeOptionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributeOptionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}/options"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_archived", r.showArchived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
	option string
	v2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest *V2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest
}

func (r ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest) V2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest(v2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest V2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest) ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest {
	r.v2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest = &v2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest
	return r
}

func (r ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest) Execute() (*V2TargetIdentifierAttributesAttributeOptionsPost200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributeOptionsOptionPatchExecute(r)
}

/*
V2TargetIdentifierAttributesAttributeOptionsOptionPatch Update a select option

Updates a select option on an attribute on either an object or a list.

Required scopes: `object_configuration:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @param option
 @return ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeOptionsOptionPatch(ctx context.Context, target string, identifier string, attribute string, option string) ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest {
	return ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
		option: option,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesAttributeOptionsPost200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeOptionsOptionPatchExecute(r ApiV2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest) (*V2TargetIdentifierAttributesAttributeOptionsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesAttributeOptionsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributeOptionsOptionPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}/options/{option}"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"option"+"}", url.PathEscape(parameterValueToString(r.option, "option")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest == nil {
		return localVarReturnValue, nil, reportError("v2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2TargetIdentifierAttributesAttributeOptionsOptionPatch400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v V2TargetIdentifierAttributesAttributeOptionsPost409Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
	v2TargetIdentifierAttributesAttributeOptionsPostRequest *V2TargetIdentifierAttributesAttributeOptionsPostRequest
}

func (r ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest) V2TargetIdentifierAttributesAttributeOptionsPostRequest(v2TargetIdentifierAttributesAttributeOptionsPostRequest V2TargetIdentifierAttributesAttributeOptionsPostRequest) ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest {
	r.v2TargetIdentifierAttributesAttributeOptionsPostRequest = &v2TargetIdentifierAttributesAttributeOptionsPostRequest
	return r
}

func (r ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest) Execute() (*V2TargetIdentifierAttributesAttributeOptionsPost200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributeOptionsPostExecute(r)
}

/*
V2TargetIdentifierAttributesAttributeOptionsPost Create a select option

Adds a select option to a select attribute on an object or a list.

Required scopes: `object_configuration:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @return ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeOptionsPost(ctx context.Context, target string, identifier string, attribute string) ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest {
	return ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesAttributeOptionsPost200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeOptionsPostExecute(r ApiV2TargetIdentifierAttributesAttributeOptionsPostRequest) (*V2TargetIdentifierAttributesAttributeOptionsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesAttributeOptionsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributeOptionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}/options"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2TargetIdentifierAttributesAttributeOptionsPostRequest == nil {
		return localVarReturnValue, nil, reportError("v2TargetIdentifierAttributesAttributeOptionsPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2TargetIdentifierAttributesAttributeOptionsPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2TargetIdentifierAttributesAttributeOptionsPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v V2TargetIdentifierAttributesAttributeOptionsPost409Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesAttributePatchRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
	v2TargetIdentifierAttributesAttributePatchRequest *V2TargetIdentifierAttributesAttributePatchRequest
}

func (r ApiV2TargetIdentifierAttributesAttributePatchRequest) V2TargetIdentifierAttributesAttributePatchRequest(v2TargetIdentifierAttributesAttributePatchRequest V2TargetIdentifierAttributesAttributePatchRequest) ApiV2TargetIdentifierAttributesAttributePatchRequest {
	r.v2TargetIdentifierAttributesAttributePatchRequest = &v2TargetIdentifierAttributesAttributePatchRequest
	return r
}

func (r ApiV2TargetIdentifierAttributesAttributePatchRequest) Execute() (*V2TargetIdentifierAttributesPost200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributePatchExecute(r)
}

/*
V2TargetIdentifierAttributesAttributePatch Update an attribute

Updates a single attribute on a given object or list.

Required scopes: `object_configuration:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @return ApiV2TargetIdentifierAttributesAttributePatchRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributePatch(ctx context.Context, target string, identifier string, attribute string) ApiV2TargetIdentifierAttributesAttributePatchRequest {
	return ApiV2TargetIdentifierAttributesAttributePatchRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesPost200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributePatchExecute(r ApiV2TargetIdentifierAttributesAttributePatchRequest) (*V2TargetIdentifierAttributesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributePatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2TargetIdentifierAttributesAttributePatchRequest == nil {
		return localVarReturnValue, nil, reportError("v2TargetIdentifierAttributesAttributePatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2TargetIdentifierAttributesAttributePatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2TargetIdentifierAttributesAttributePatch400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
	showArchived *bool
}

func (r ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest) ShowArchived(showArchived bool) ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest {
	r.showArchived = &showArchived
	return r
}

func (r ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest) Execute() (*V2TargetIdentifierAttributesAttributeStatusesGet200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributeStatusesGetExecute(r)
}

/*
V2TargetIdentifierAttributesAttributeStatusesGet List statuses

Lists all statuses for a particular status attribute on either an object or a list.

Required scopes: `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @return ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeStatusesGet(ctx context.Context, target string, identifier string, attribute string) ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest {
	return ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesAttributeStatusesGet200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeStatusesGetExecute(r ApiV2TargetIdentifierAttributesAttributeStatusesGetRequest) (*V2TargetIdentifierAttributesAttributeStatusesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesAttributeStatusesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributeStatusesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}/statuses"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_archived", r.showArchived, "form", "")
	} else {
		var defaultValue bool = false
		r.showArchived = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
	v2TargetIdentifierAttributesAttributeStatusesPostRequest *V2TargetIdentifierAttributesAttributeStatusesPostRequest
}

func (r ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest) V2TargetIdentifierAttributesAttributeStatusesPostRequest(v2TargetIdentifierAttributesAttributeStatusesPostRequest V2TargetIdentifierAttributesAttributeStatusesPostRequest) ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest {
	r.v2TargetIdentifierAttributesAttributeStatusesPostRequest = &v2TargetIdentifierAttributesAttributeStatusesPostRequest
	return r
}

func (r ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest) Execute() (*V2TargetIdentifierAttributesAttributeStatusesPost200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributeStatusesPostExecute(r)
}

/*
V2TargetIdentifierAttributesAttributeStatusesPost Create a status

Add a new status to a status attribute on either an object or a list.

Required scopes: `object_configuration:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @return ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeStatusesPost(ctx context.Context, target string, identifier string, attribute string) ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest {
	return ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesAttributeStatusesPost200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeStatusesPostExecute(r ApiV2TargetIdentifierAttributesAttributeStatusesPostRequest) (*V2TargetIdentifierAttributesAttributeStatusesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesAttributeStatusesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributeStatusesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}/statuses"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2TargetIdentifierAttributesAttributeStatusesPostRequest == nil {
		return localVarReturnValue, nil, reportError("v2TargetIdentifierAttributesAttributeStatusesPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2TargetIdentifierAttributesAttributeStatusesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2TargetIdentifierAttributesAttributeStatusesPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v V2TargetIdentifierAttributesAttributeStatusesPost409Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	attribute string
	status string
	v2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest *V2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest
}

func (r ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest) V2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest(v2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest V2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest) ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest {
	r.v2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest = &v2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest
	return r
}

func (r ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest) Execute() (*V2TargetIdentifierAttributesAttributeStatusesPost200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesAttributeStatusesStatusPatchExecute(r)
}

/*
V2TargetIdentifierAttributesAttributeStatusesStatusPatch Update a status

Update a status on an status attribute on either an object or a list.

Required scopes: `object_configuration:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @param attribute
 @param status
 @return ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeStatusesStatusPatch(ctx context.Context, target string, identifier string, attribute string, status string) ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest {
	return ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
		attribute: attribute,
		status: status,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesAttributeStatusesPost200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesAttributeStatusesStatusPatchExecute(r ApiV2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest) (*V2TargetIdentifierAttributesAttributeStatusesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesAttributeStatusesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesAttributeStatusesStatusPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes/{attribute}/statuses/{status}"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attribute"+"}", url.PathEscape(parameterValueToString(r.attribute, "attribute")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"status"+"}", url.PathEscape(parameterValueToString(r.status, "status")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest == nil {
		return localVarReturnValue, nil, reportError("v2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2TargetIdentifierAttributesAttributeStatusesStatusPatch400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesAttributeGet404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v V2TargetIdentifierAttributesAttributeStatusesPost409Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesGetRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	limit *int32
	offset *int32
	showArchived *bool
}

func (r ApiV2TargetIdentifierAttributesGetRequest) Limit(limit int32) ApiV2TargetIdentifierAttributesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiV2TargetIdentifierAttributesGetRequest) Offset(offset int32) ApiV2TargetIdentifierAttributesGetRequest {
	r.offset = &offset
	return r
}

func (r ApiV2TargetIdentifierAttributesGetRequest) ShowArchived(showArchived bool) ApiV2TargetIdentifierAttributesGetRequest {
	r.showArchived = &showArchived
	return r
}

func (r ApiV2TargetIdentifierAttributesGetRequest) Execute() (*V2TargetIdentifierAttributesGet200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesGetExecute(r)
}

/*
V2TargetIdentifierAttributesGet List attributes

Lists all attributes defined on a specific object or list. Attributes are returned in the order that they are sorted by in the UI.

Required scopes: `object_configuration:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @return ApiV2TargetIdentifierAttributesGetRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesGet(ctx context.Context, target string, identifier string) ApiV2TargetIdentifierAttributesGetRequest {
	return ApiV2TargetIdentifierAttributesGetRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesGet200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesGetExecute(r ApiV2TargetIdentifierAttributesGetRequest) (*V2TargetIdentifierAttributesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.showArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_archived", r.showArchived, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2TargetIdentifierAttributesPostRequest struct {
	ctx context.Context
	ApiService *AttributesAPIService
	target string
	identifier string
	v2TargetIdentifierAttributesPostRequest *V2TargetIdentifierAttributesPostRequest
}

func (r ApiV2TargetIdentifierAttributesPostRequest) V2TargetIdentifierAttributesPostRequest(v2TargetIdentifierAttributesPostRequest V2TargetIdentifierAttributesPostRequest) ApiV2TargetIdentifierAttributesPostRequest {
	r.v2TargetIdentifierAttributesPostRequest = &v2TargetIdentifierAttributesPostRequest
	return r
}

func (r ApiV2TargetIdentifierAttributesPostRequest) Execute() (*V2TargetIdentifierAttributesPost200Response, *http.Response, error) {
	return r.ApiService.V2TargetIdentifierAttributesPostExecute(r)
}

/*
V2TargetIdentifierAttributesPost Create an attribute

Creates a new attribute on either an object or a list.

To create an attribute on an object, you must also have the `object_configuration:read-write` scope.

To create an attribute on a list, you must also have the `list_configuration:read-write` scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param target
 @param identifier
 @return ApiV2TargetIdentifierAttributesPostRequest
*/
func (a *AttributesAPIService) V2TargetIdentifierAttributesPost(ctx context.Context, target string, identifier string) ApiV2TargetIdentifierAttributesPostRequest {
	return ApiV2TargetIdentifierAttributesPostRequest{
		ApiService: a,
		ctx: ctx,
		target: target,
		identifier: identifier,
	}
}

// Execute executes the request
//  @return V2TargetIdentifierAttributesPost200Response
func (a *AttributesAPIService) V2TargetIdentifierAttributesPostExecute(r ApiV2TargetIdentifierAttributesPostRequest) (*V2TargetIdentifierAttributesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2TargetIdentifierAttributesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttributesAPIService.V2TargetIdentifierAttributesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{target}/{identifier}/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"target"+"}", url.PathEscape(parameterValueToString(r.target, "target")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2TargetIdentifierAttributesPostRequest == nil {
		return localVarReturnValue, nil, reportError("v2TargetIdentifierAttributesPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2TargetIdentifierAttributesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2TargetIdentifierAttributesPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2TargetIdentifierAttributesPost404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v V2TargetIdentifierAttributesPost409Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
