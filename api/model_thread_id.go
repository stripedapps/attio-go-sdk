/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ThreadId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadId{}

// ThreadId struct for ThreadId
type ThreadId struct {
	// The ID of the workspace the thread belongs to.
	WorkspaceId string `json:"workspace_id"`
	// The ID of the thread.
	ThreadId string `json:"thread_id"`
}

type _ThreadId ThreadId

// NewThreadId instantiates a new ThreadId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadId(workspaceId string, threadId string) *ThreadId {
	this := ThreadId{}
	this.WorkspaceId = workspaceId
	this.ThreadId = threadId
	return &this
}

// NewThreadIdWithDefaults instantiates a new ThreadId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadIdWithDefaults() *ThreadId {
	this := ThreadId{}
	return &this
}

// GetWorkspaceId returns the WorkspaceId field value
func (o *ThreadId) GetWorkspaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value
// and a boolean to check if the value has been set.
func (o *ThreadId) GetWorkspaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspaceId, true
}

// SetWorkspaceId sets field value
func (o *ThreadId) SetWorkspaceId(v string) {
	o.WorkspaceId = v
}

// GetThreadId returns the ThreadId field value
func (o *ThreadId) GetThreadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value
// and a boolean to check if the value has been set.
func (o *ThreadId) GetThreadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThreadId, true
}

// SetThreadId sets field value
func (o *ThreadId) SetThreadId(v string) {
	o.ThreadId = v
}

func (o ThreadId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workspace_id"] = o.WorkspaceId
	toSerialize["thread_id"] = o.ThreadId
	return toSerialize, nil
}

func (o *ThreadId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workspace_id",
		"thread_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varThreadId := _ThreadId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varThreadId)

	if err != nil {
		return err
	}

	*o = ThreadId(varThreadId)

	return err
}

type NullableThreadId struct {
	value *ThreadId
	isSet bool
}

func (v NullableThreadId) Get() *ThreadId {
	return v.value
}

func (v *NullableThreadId) Set(val *ThreadId) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadId) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadId(val *ThreadId) *NullableThreadId {
	return &NullableThreadId{value: val, isSet: true}
}

func (v NullableThreadId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


