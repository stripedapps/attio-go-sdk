/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// InputValue A union of possible value types, as required in request bodies.
type InputValue struct {
	InputValueAnyOf *InputValueAnyOf
	InputValueAnyOf1 *InputValueAnyOf1
	InputValueAnyOf10 *InputValueAnyOf10
	InputValueAnyOf11 *InputValueAnyOf11
	InputValueAnyOf12 *InputValueAnyOf12
	InputValueAnyOf13 *InputValueAnyOf13
	InputValueAnyOf14 *InputValueAnyOf14
	InputValueAnyOf15 *InputValueAnyOf15
	InputValueAnyOf2 *InputValueAnyOf2
	InputValueAnyOf3 *InputValueAnyOf3
	InputValueAnyOf4 *InputValueAnyOf4
	InputValueAnyOf5 *InputValueAnyOf5
	InputValueAnyOf6 *InputValueAnyOf6
	InputValueAnyOf7 *InputValueAnyOf7
	InputValueAnyOf8 *InputValueAnyOf8
	InputValueAnyOf9 *InputValueAnyOf9
	V2TasksPostRequestDataLinkedRecordsInnerAnyOf1 *V2TasksPostRequestDataLinkedRecordsInnerAnyOf1
	V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf *V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf
	V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1 *V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *InputValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into InputValueAnyOf
	err = json.Unmarshal(data, &dst.InputValueAnyOf);
	if err == nil {
		jsonInputValueAnyOf, _ := json.Marshal(dst.InputValueAnyOf)
		if string(jsonInputValueAnyOf) == "{}" { // empty struct
			dst.InputValueAnyOf = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf, return on the first match
		}
	} else {
		dst.InputValueAnyOf = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf1
	err = json.Unmarshal(data, &dst.InputValueAnyOf1);
	if err == nil {
		jsonInputValueAnyOf1, _ := json.Marshal(dst.InputValueAnyOf1)
		if string(jsonInputValueAnyOf1) == "{}" { // empty struct
			dst.InputValueAnyOf1 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf1, return on the first match
		}
	} else {
		dst.InputValueAnyOf1 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf10
	err = json.Unmarshal(data, &dst.InputValueAnyOf10);
	if err == nil {
		jsonInputValueAnyOf10, _ := json.Marshal(dst.InputValueAnyOf10)
		if string(jsonInputValueAnyOf10) == "{}" { // empty struct
			dst.InputValueAnyOf10 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf10, return on the first match
		}
	} else {
		dst.InputValueAnyOf10 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf11
	err = json.Unmarshal(data, &dst.InputValueAnyOf11);
	if err == nil {
		jsonInputValueAnyOf11, _ := json.Marshal(dst.InputValueAnyOf11)
		if string(jsonInputValueAnyOf11) == "{}" { // empty struct
			dst.InputValueAnyOf11 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf11, return on the first match
		}
	} else {
		dst.InputValueAnyOf11 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf12
	err = json.Unmarshal(data, &dst.InputValueAnyOf12);
	if err == nil {
		jsonInputValueAnyOf12, _ := json.Marshal(dst.InputValueAnyOf12)
		if string(jsonInputValueAnyOf12) == "{}" { // empty struct
			dst.InputValueAnyOf12 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf12, return on the first match
		}
	} else {
		dst.InputValueAnyOf12 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf13
	err = json.Unmarshal(data, &dst.InputValueAnyOf13);
	if err == nil {
		jsonInputValueAnyOf13, _ := json.Marshal(dst.InputValueAnyOf13)
		if string(jsonInputValueAnyOf13) == "{}" { // empty struct
			dst.InputValueAnyOf13 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf13, return on the first match
		}
	} else {
		dst.InputValueAnyOf13 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf14
	err = json.Unmarshal(data, &dst.InputValueAnyOf14);
	if err == nil {
		jsonInputValueAnyOf14, _ := json.Marshal(dst.InputValueAnyOf14)
		if string(jsonInputValueAnyOf14) == "{}" { // empty struct
			dst.InputValueAnyOf14 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf14, return on the first match
		}
	} else {
		dst.InputValueAnyOf14 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf15
	err = json.Unmarshal(data, &dst.InputValueAnyOf15);
	if err == nil {
		jsonInputValueAnyOf15, _ := json.Marshal(dst.InputValueAnyOf15)
		if string(jsonInputValueAnyOf15) == "{}" { // empty struct
			dst.InputValueAnyOf15 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf15, return on the first match
		}
	} else {
		dst.InputValueAnyOf15 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf2
	err = json.Unmarshal(data, &dst.InputValueAnyOf2);
	if err == nil {
		jsonInputValueAnyOf2, _ := json.Marshal(dst.InputValueAnyOf2)
		if string(jsonInputValueAnyOf2) == "{}" { // empty struct
			dst.InputValueAnyOf2 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf2, return on the first match
		}
	} else {
		dst.InputValueAnyOf2 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf3
	err = json.Unmarshal(data, &dst.InputValueAnyOf3);
	if err == nil {
		jsonInputValueAnyOf3, _ := json.Marshal(dst.InputValueAnyOf3)
		if string(jsonInputValueAnyOf3) == "{}" { // empty struct
			dst.InputValueAnyOf3 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf3, return on the first match
		}
	} else {
		dst.InputValueAnyOf3 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf4
	err = json.Unmarshal(data, &dst.InputValueAnyOf4);
	if err == nil {
		jsonInputValueAnyOf4, _ := json.Marshal(dst.InputValueAnyOf4)
		if string(jsonInputValueAnyOf4) == "{}" { // empty struct
			dst.InputValueAnyOf4 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf4, return on the first match
		}
	} else {
		dst.InputValueAnyOf4 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf5
	err = json.Unmarshal(data, &dst.InputValueAnyOf5);
	if err == nil {
		jsonInputValueAnyOf5, _ := json.Marshal(dst.InputValueAnyOf5)
		if string(jsonInputValueAnyOf5) == "{}" { // empty struct
			dst.InputValueAnyOf5 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf5, return on the first match
		}
	} else {
		dst.InputValueAnyOf5 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf6
	err = json.Unmarshal(data, &dst.InputValueAnyOf6);
	if err == nil {
		jsonInputValueAnyOf6, _ := json.Marshal(dst.InputValueAnyOf6)
		if string(jsonInputValueAnyOf6) == "{}" { // empty struct
			dst.InputValueAnyOf6 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf6, return on the first match
		}
	} else {
		dst.InputValueAnyOf6 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf7
	err = json.Unmarshal(data, &dst.InputValueAnyOf7);
	if err == nil {
		jsonInputValueAnyOf7, _ := json.Marshal(dst.InputValueAnyOf7)
		if string(jsonInputValueAnyOf7) == "{}" { // empty struct
			dst.InputValueAnyOf7 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf7, return on the first match
		}
	} else {
		dst.InputValueAnyOf7 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf8
	err = json.Unmarshal(data, &dst.InputValueAnyOf8);
	if err == nil {
		jsonInputValueAnyOf8, _ := json.Marshal(dst.InputValueAnyOf8)
		if string(jsonInputValueAnyOf8) == "{}" { // empty struct
			dst.InputValueAnyOf8 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf8, return on the first match
		}
	} else {
		dst.InputValueAnyOf8 = nil
	}

	// try to unmarshal JSON data into InputValueAnyOf9
	err = json.Unmarshal(data, &dst.InputValueAnyOf9);
	if err == nil {
		jsonInputValueAnyOf9, _ := json.Marshal(dst.InputValueAnyOf9)
		if string(jsonInputValueAnyOf9) == "{}" { // empty struct
			dst.InputValueAnyOf9 = nil
		} else {
			return nil // data stored in dst.InputValueAnyOf9, return on the first match
		}
	} else {
		dst.InputValueAnyOf9 = nil
	}

	// try to unmarshal JSON data into V2TasksPostRequestDataLinkedRecordsInnerAnyOf1
	err = json.Unmarshal(data, &dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1);
	if err == nil {
		jsonV2TasksPostRequestDataLinkedRecordsInnerAnyOf1, _ := json.Marshal(dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1)
		if string(jsonV2TasksPostRequestDataLinkedRecordsInnerAnyOf1) == "{}" { // empty struct
			dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1, return on the first match
		}
	} else {
		dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1 = nil
	}

	// try to unmarshal JSON data into V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf
	err = json.Unmarshal(data, &dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf);
	if err == nil {
		jsonV2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf, _ := json.Marshal(dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf)
		if string(jsonV2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf) == "{}" { // empty struct
			dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf = nil
		} else {
			return nil // data stored in dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf, return on the first match
		}
	} else {
		dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf = nil
	}

	// try to unmarshal JSON data into V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1
	err = json.Unmarshal(data, &dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1);
	if err == nil {
		jsonV2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1, _ := json.Marshal(dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1)
		if string(jsonV2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1) == "{}" { // empty struct
			dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1, return on the first match
		}
	} else {
		dst.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(InputValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *InputValue) MarshalJSON() ([]byte, error) {
	if src.InputValueAnyOf != nil {
		return json.Marshal(&src.InputValueAnyOf)
	}

	if src.InputValueAnyOf1 != nil {
		return json.Marshal(&src.InputValueAnyOf1)
	}

	if src.InputValueAnyOf10 != nil {
		return json.Marshal(&src.InputValueAnyOf10)
	}

	if src.InputValueAnyOf11 != nil {
		return json.Marshal(&src.InputValueAnyOf11)
	}

	if src.InputValueAnyOf12 != nil {
		return json.Marshal(&src.InputValueAnyOf12)
	}

	if src.InputValueAnyOf13 != nil {
		return json.Marshal(&src.InputValueAnyOf13)
	}

	if src.InputValueAnyOf14 != nil {
		return json.Marshal(&src.InputValueAnyOf14)
	}

	if src.InputValueAnyOf15 != nil {
		return json.Marshal(&src.InputValueAnyOf15)
	}

	if src.InputValueAnyOf2 != nil {
		return json.Marshal(&src.InputValueAnyOf2)
	}

	if src.InputValueAnyOf3 != nil {
		return json.Marshal(&src.InputValueAnyOf3)
	}

	if src.InputValueAnyOf4 != nil {
		return json.Marshal(&src.InputValueAnyOf4)
	}

	if src.InputValueAnyOf5 != nil {
		return json.Marshal(&src.InputValueAnyOf5)
	}

	if src.InputValueAnyOf6 != nil {
		return json.Marshal(&src.InputValueAnyOf6)
	}

	if src.InputValueAnyOf7 != nil {
		return json.Marshal(&src.InputValueAnyOf7)
	}

	if src.InputValueAnyOf8 != nil {
		return json.Marshal(&src.InputValueAnyOf8)
	}

	if src.InputValueAnyOf9 != nil {
		return json.Marshal(&src.InputValueAnyOf9)
	}

	if src.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1 != nil {
		return json.Marshal(&src.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1)
	}

	if src.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf != nil {
		return json.Marshal(&src.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf)
	}

	if src.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1 != nil {
		return json.Marshal(&src.V2TasksPostRequestDataLinkedRecordsInnerAnyOf1SlugOrIdOfMatchingAttributeInnerAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableInputValue struct {
	value *InputValue
	isSet bool
}

func (v NullableInputValue) Get() *InputValue {
	return v.value
}

func (v *NullableInputValue) Set(val *InputValue) {
	v.value = val
	v.isSet = true
}

func (v NullableInputValue) IsSet() bool {
	return v.isSet
}

func (v *NullableInputValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputValue(val *InputValue) *NullableInputValue {
	return &NullableInputValue{value: val, isSet: true}
}

func (v NullableInputValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


