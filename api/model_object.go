/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Object type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Object{}

// Object struct for Object
type Object struct {
	Id ObjectId `json:"id"`
	// A unique, human-readable slug to access the object through URLs and API calls. Formatted in snake case.
	ApiSlug NullableString `json:"api_slug"`
	// The singular form of the object's name.
	SingularNoun NullableString `json:"singular_noun"`
	// The plural form of the object's name.
	PluralNoun NullableString `json:"plural_noun"`
	// When the object was created.
	CreatedAt string `json:"created_at"`
}

type _Object Object

// NewObject instantiates a new Object object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObject(id ObjectId, apiSlug NullableString, singularNoun NullableString, pluralNoun NullableString, createdAt string) *Object {
	this := Object{}
	this.Id = id
	this.ApiSlug = apiSlug
	this.SingularNoun = singularNoun
	this.PluralNoun = pluralNoun
	this.CreatedAt = createdAt
	return &this
}

// NewObjectWithDefaults instantiates a new Object object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectWithDefaults() *Object {
	this := Object{}
	return &this
}

// GetId returns the Id field value
func (o *Object) GetId() ObjectId {
	if o == nil {
		var ret ObjectId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Object) GetIdOk() (*ObjectId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Object) SetId(v ObjectId) {
	o.Id = v
}

// GetApiSlug returns the ApiSlug field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Object) GetApiSlug() string {
	if o == nil || o.ApiSlug.Get() == nil {
		var ret string
		return ret
	}

	return *o.ApiSlug.Get()
}

// GetApiSlugOk returns a tuple with the ApiSlug field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Object) GetApiSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiSlug.Get(), o.ApiSlug.IsSet()
}

// SetApiSlug sets field value
func (o *Object) SetApiSlug(v string) {
	o.ApiSlug.Set(&v)
}

// GetSingularNoun returns the SingularNoun field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Object) GetSingularNoun() string {
	if o == nil || o.SingularNoun.Get() == nil {
		var ret string
		return ret
	}

	return *o.SingularNoun.Get()
}

// GetSingularNounOk returns a tuple with the SingularNoun field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Object) GetSingularNounOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingularNoun.Get(), o.SingularNoun.IsSet()
}

// SetSingularNoun sets field value
func (o *Object) SetSingularNoun(v string) {
	o.SingularNoun.Set(&v)
}

// GetPluralNoun returns the PluralNoun field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Object) GetPluralNoun() string {
	if o == nil || o.PluralNoun.Get() == nil {
		var ret string
		return ret
	}

	return *o.PluralNoun.Get()
}

// GetPluralNounOk returns a tuple with the PluralNoun field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Object) GetPluralNounOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PluralNoun.Get(), o.PluralNoun.IsSet()
}

// SetPluralNoun sets field value
func (o *Object) SetPluralNoun(v string) {
	o.PluralNoun.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Object) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Object) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Object) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o Object) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Object) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["api_slug"] = o.ApiSlug.Get()
	toSerialize["singular_noun"] = o.SingularNoun.Get()
	toSerialize["plural_noun"] = o.PluralNoun.Get()
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Object) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"api_slug",
		"singular_noun",
		"plural_noun",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObject := _Object{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObject)

	if err != nil {
		return err
	}

	*o = Object(varObject)

	return err
}

type NullableObject struct {
	value *Object
	isSet bool
}

func (v NullableObject) Get() *Object {
	return v.value
}

func (v *NullableObject) Set(val *Object) {
	v.value = val
	v.isSet = true
}

func (v NullableObject) IsSet() bool {
	return v.isSet
}

func (v *NullableObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObject(val *Object) *NullableObject {
	return &NullableObject{value: val, isSet: true}
}

func (v NullableObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


