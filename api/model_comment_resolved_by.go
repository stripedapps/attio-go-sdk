/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommentResolvedBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentResolvedBy{}

// CommentResolvedBy The actor that resolved this comment.
type CommentResolvedBy struct {
	// An ID to identify the actor.
	Id *string `json:"id,omitempty"`
	// The type of actor. [Read more information on actor types here](/docs/actors).
	Type *string `json:"type,omitempty"`
}

// NewCommentResolvedBy instantiates a new CommentResolvedBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentResolvedBy() *CommentResolvedBy {
	this := CommentResolvedBy{}
	return &this
}

// NewCommentResolvedByWithDefaults instantiates a new CommentResolvedBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentResolvedByWithDefaults() *CommentResolvedBy {
	this := CommentResolvedBy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommentResolvedBy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentResolvedBy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommentResolvedBy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommentResolvedBy) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommentResolvedBy) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentResolvedBy) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommentResolvedBy) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CommentResolvedBy) SetType(v string) {
	o.Type = &v
}

func (o CommentResolvedBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentResolvedBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCommentResolvedBy struct {
	value *CommentResolvedBy
	isSet bool
}

func (v NullableCommentResolvedBy) Get() *CommentResolvedBy {
	return v.value
}

func (v *NullableCommentResolvedBy) Set(val *CommentResolvedBy) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentResolvedBy) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentResolvedBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentResolvedBy(val *CommentResolvedBy) *NullableCommentResolvedBy {
	return &NullableCommentResolvedBy{value: val, isSet: true}
}

func (v NullableCommentResolvedBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentResolvedBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


