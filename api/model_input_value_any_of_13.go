/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InputValueAnyOf13 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputValueAnyOf13{}

// InputValueAnyOf13 struct for InputValueAnyOf13
type InputValueAnyOf13 struct {
	// The UUID or select option title identifying the selected select option.
	Option string `json:"option"`
}

type _InputValueAnyOf13 InputValueAnyOf13

// NewInputValueAnyOf13 instantiates a new InputValueAnyOf13 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputValueAnyOf13(option string) *InputValueAnyOf13 {
	this := InputValueAnyOf13{}
	this.Option = option
	return &this
}

// NewInputValueAnyOf13WithDefaults instantiates a new InputValueAnyOf13 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputValueAnyOf13WithDefaults() *InputValueAnyOf13 {
	this := InputValueAnyOf13{}
	return &this
}

// GetOption returns the Option field value
func (o *InputValueAnyOf13) GetOption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Option
}

// GetOptionOk returns a tuple with the Option field value
// and a boolean to check if the value has been set.
func (o *InputValueAnyOf13) GetOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Option, true
}

// SetOption sets field value
func (o *InputValueAnyOf13) SetOption(v string) {
	o.Option = v
}

func (o InputValueAnyOf13) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputValueAnyOf13) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["option"] = o.Option
	return toSerialize, nil
}

func (o *InputValueAnyOf13) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"option",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInputValueAnyOf13 := _InputValueAnyOf13{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputValueAnyOf13)

	if err != nil {
		return err
	}

	*o = InputValueAnyOf13(varInputValueAnyOf13)

	return err
}

type NullableInputValueAnyOf13 struct {
	value *InputValueAnyOf13
	isSet bool
}

func (v NullableInputValueAnyOf13) Get() *InputValueAnyOf13 {
	return v.value
}

func (v *NullableInputValueAnyOf13) Set(val *InputValueAnyOf13) {
	v.value = val
	v.isSet = true
}

func (v NullableInputValueAnyOf13) IsSet() bool {
	return v.isSet
}

func (v *NullableInputValueAnyOf13) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputValueAnyOf13(val *InputValueAnyOf13) *NullableInputValueAnyOf13 {
	return &NullableInputValueAnyOf13{value: val, isSet: true}
}

func (v NullableInputValueAnyOf13) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputValueAnyOf13) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


