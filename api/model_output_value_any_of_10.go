/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutputValueAnyOf10 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputValueAnyOf10{}

// OutputValueAnyOf10 struct for OutputValueAnyOf10
type OutputValueAnyOf10 struct {
	// The first name.
	FirstName string `json:"first_name"`
	// The last name.
	LastName string `json:"last_name"`
	// The full name.
	FullName string `json:"full_name"`
	// The attribute type of the value.
	AttributeType string `json:"attribute_type"`
}

type _OutputValueAnyOf10 OutputValueAnyOf10

// NewOutputValueAnyOf10 instantiates a new OutputValueAnyOf10 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputValueAnyOf10(firstName string, lastName string, fullName string, attributeType string) *OutputValueAnyOf10 {
	this := OutputValueAnyOf10{}
	this.FirstName = firstName
	this.LastName = lastName
	this.FullName = fullName
	this.AttributeType = attributeType
	return &this
}

// NewOutputValueAnyOf10WithDefaults instantiates a new OutputValueAnyOf10 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputValueAnyOf10WithDefaults() *OutputValueAnyOf10 {
	this := OutputValueAnyOf10{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *OutputValueAnyOf10) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *OutputValueAnyOf10) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *OutputValueAnyOf10) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *OutputValueAnyOf10) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *OutputValueAnyOf10) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *OutputValueAnyOf10) SetLastName(v string) {
	o.LastName = v
}

// GetFullName returns the FullName field value
func (o *OutputValueAnyOf10) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *OutputValueAnyOf10) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *OutputValueAnyOf10) SetFullName(v string) {
	o.FullName = v
}

// GetAttributeType returns the AttributeType field value
func (o *OutputValueAnyOf10) GetAttributeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributeType
}

// GetAttributeTypeOk returns a tuple with the AttributeType field value
// and a boolean to check if the value has been set.
func (o *OutputValueAnyOf10) GetAttributeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeType, true
}

// SetAttributeType sets field value
func (o *OutputValueAnyOf10) SetAttributeType(v string) {
	o.AttributeType = v
}

func (o OutputValueAnyOf10) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputValueAnyOf10) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["full_name"] = o.FullName
	toSerialize["attribute_type"] = o.AttributeType
	return toSerialize, nil
}

func (o *OutputValueAnyOf10) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_name",
		"last_name",
		"full_name",
		"attribute_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutputValueAnyOf10 := _OutputValueAnyOf10{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutputValueAnyOf10)

	if err != nil {
		return err
	}

	*o = OutputValueAnyOf10(varOutputValueAnyOf10)

	return err
}

type NullableOutputValueAnyOf10 struct {
	value *OutputValueAnyOf10
	isSet bool
}

func (v NullableOutputValueAnyOf10) Get() *OutputValueAnyOf10 {
	return v.value
}

func (v *NullableOutputValueAnyOf10) Set(val *OutputValueAnyOf10) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputValueAnyOf10) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputValueAnyOf10) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputValueAnyOf10(val *OutputValueAnyOf10) *NullableOutputValueAnyOf10 {
	return &NullableOutputValueAnyOf10{value: val, isSet: true}
}

func (v NullableOutputValueAnyOf10) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputValueAnyOf10) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


