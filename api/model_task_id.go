/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskId{}

// TaskId struct for TaskId
type TaskId struct {
	// The ID of the workspace the task belongs to.
	WorkspaceId string `json:"workspace_id"`
	// The ID of the task.
	TaskId string `json:"task_id"`
}

type _TaskId TaskId

// NewTaskId instantiates a new TaskId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskId(workspaceId string, taskId string) *TaskId {
	this := TaskId{}
	this.WorkspaceId = workspaceId
	this.TaskId = taskId
	return &this
}

// NewTaskIdWithDefaults instantiates a new TaskId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskIdWithDefaults() *TaskId {
	this := TaskId{}
	return &this
}

// GetWorkspaceId returns the WorkspaceId field value
func (o *TaskId) GetWorkspaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value
// and a boolean to check if the value has been set.
func (o *TaskId) GetWorkspaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspaceId, true
}

// SetWorkspaceId sets field value
func (o *TaskId) SetWorkspaceId(v string) {
	o.WorkspaceId = v
}

// GetTaskId returns the TaskId field value
func (o *TaskId) GetTaskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *TaskId) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *TaskId) SetTaskId(v string) {
	o.TaskId = v
}

func (o TaskId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workspace_id"] = o.WorkspaceId
	toSerialize["task_id"] = o.TaskId
	return toSerialize, nil
}

func (o *TaskId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workspace_id",
		"task_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskId := _TaskId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskId)

	if err != nil {
		return err
	}

	*o = TaskId(varTaskId)

	return err
}

type NullableTaskId struct {
	value *TaskId
	isSet bool
}

func (v NullableTaskId) Get() *TaskId {
	return v.value
}

func (v *NullableTaskId) Set(val *TaskId) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskId) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskId(val *TaskId) *NullableTaskId {
	return &NullableTaskId{value: val, isSet: true}
}

func (v NullableTaskId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


