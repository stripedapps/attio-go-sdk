/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// AttributeDefaultValue The default value for this attribute. Static values are used to directly populate values using their contents. Dynamic values are used to lookup data at the point of creation. For example, you could use a dynamic value to insert a value for the currently logged in user. Which default values are available is dependent on the type of the attribute.
type AttributeDefaultValue struct {
	AttributeDefaultValueAnyOf *AttributeDefaultValueAnyOf
	AttributeDefaultValueAnyOf1 *AttributeDefaultValueAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AttributeDefaultValue) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into AttributeDefaultValueAnyOf
	err = json.Unmarshal(data, &dst.AttributeDefaultValueAnyOf);
	if err == nil {
		jsonAttributeDefaultValueAnyOf, _ := json.Marshal(dst.AttributeDefaultValueAnyOf)
		if string(jsonAttributeDefaultValueAnyOf) == "{}" { // empty struct
			dst.AttributeDefaultValueAnyOf = nil
		} else {
			return nil // data stored in dst.AttributeDefaultValueAnyOf, return on the first match
		}
	} else {
		dst.AttributeDefaultValueAnyOf = nil
	}

	// try to unmarshal JSON data into AttributeDefaultValueAnyOf1
	err = json.Unmarshal(data, &dst.AttributeDefaultValueAnyOf1);
	if err == nil {
		jsonAttributeDefaultValueAnyOf1, _ := json.Marshal(dst.AttributeDefaultValueAnyOf1)
		if string(jsonAttributeDefaultValueAnyOf1) == "{}" { // empty struct
			dst.AttributeDefaultValueAnyOf1 = nil
		} else {
			return nil // data stored in dst.AttributeDefaultValueAnyOf1, return on the first match
		}
	} else {
		dst.AttributeDefaultValueAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AttributeDefaultValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AttributeDefaultValue) MarshalJSON() ([]byte, error) {
	if src.AttributeDefaultValueAnyOf != nil {
		return json.Marshal(&src.AttributeDefaultValueAnyOf)
	}

	if src.AttributeDefaultValueAnyOf1 != nil {
		return json.Marshal(&src.AttributeDefaultValueAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableAttributeDefaultValue struct {
	value *AttributeDefaultValue
	isSet bool
}

func (v NullableAttributeDefaultValue) Get() *AttributeDefaultValue {
	return v.value
}

func (v *NullableAttributeDefaultValue) Set(val *AttributeDefaultValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeDefaultValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeDefaultValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeDefaultValue(val *AttributeDefaultValue) *NullableAttributeDefaultValue {
	return &NullableAttributeDefaultValue{value: val, isSet: true}
}

func (v NullableAttributeDefaultValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeDefaultValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


