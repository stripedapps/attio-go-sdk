/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Thread type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Thread{}

// Thread struct for Thread
type Thread struct {
	Id ThreadId `json:"id"`
	// An array of comments in the thread, sorted by `created_at`.
	Comments []Comment `json:"comments"`
	// When the thread was created.
	CreatedAt string `json:"created_at"`
}

type _Thread Thread

// NewThread instantiates a new Thread object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThread(id ThreadId, comments []Comment, createdAt string) *Thread {
	this := Thread{}
	this.Id = id
	this.Comments = comments
	this.CreatedAt = createdAt
	return &this
}

// NewThreadWithDefaults instantiates a new Thread object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadWithDefaults() *Thread {
	this := Thread{}
	return &this
}

// GetId returns the Id field value
func (o *Thread) GetId() ThreadId {
	if o == nil {
		var ret ThreadId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Thread) GetIdOk() (*ThreadId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Thread) SetId(v ThreadId) {
	o.Id = v
}

// GetComments returns the Comments field value
func (o *Thread) GetComments() []Comment {
	if o == nil {
		var ret []Comment
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *Thread) GetCommentsOk() ([]Comment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comments, true
}

// SetComments sets field value
func (o *Thread) SetComments(v []Comment) {
	o.Comments = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Thread) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Thread) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Thread) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o Thread) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Thread) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["comments"] = o.Comments
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Thread) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"comments",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varThread := _Thread{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varThread)

	if err != nil {
		return err
	}

	*o = Thread(varThread)

	return err
}

type NullableThread struct {
	value *Thread
	isSet bool
}

func (v NullableThread) Get() *Thread {
	return v.value
}

func (v *NullableThread) Set(val *Thread) {
	v.value = val
	v.isSet = true
}

func (v NullableThread) IsSet() bool {
	return v.isSet
}

func (v *NullableThread) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThread(val *Thread) *NullableThread {
	return &NullableThread{value: val, isSet: true}
}

func (v NullableThread) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThread) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


