/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// OutputValue A union of possible value types, as returned in response bodies.
type OutputValue struct {
	OutputValueAnyOf *OutputValueAnyOf
	OutputValueAnyOf1 *OutputValueAnyOf1
	OutputValueAnyOf10 *OutputValueAnyOf10
	OutputValueAnyOf11 *OutputValueAnyOf11
	OutputValueAnyOf12 *OutputValueAnyOf12
	OutputValueAnyOf13 *OutputValueAnyOf13
	OutputValueAnyOf14 *OutputValueAnyOf14
	OutputValueAnyOf15 *OutputValueAnyOf15
	OutputValueAnyOf16 *OutputValueAnyOf16
	OutputValueAnyOf17 *OutputValueAnyOf17
	OutputValueAnyOf18 *OutputValueAnyOf18
	OutputValueAnyOf2 *OutputValueAnyOf2
	OutputValueAnyOf3 *OutputValueAnyOf3
	OutputValueAnyOf4 *OutputValueAnyOf4
	OutputValueAnyOf5 *OutputValueAnyOf5
	OutputValueAnyOf6 *OutputValueAnyOf6
	OutputValueAnyOf7 *OutputValueAnyOf7
	OutputValueAnyOf8 *OutputValueAnyOf8
	OutputValueAnyOf9 *OutputValueAnyOf9
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *OutputValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into OutputValueAnyOf
	err = json.Unmarshal(data, &dst.OutputValueAnyOf);
	if err == nil {
		jsonOutputValueAnyOf, _ := json.Marshal(dst.OutputValueAnyOf)
		if string(jsonOutputValueAnyOf) == "{}" { // empty struct
			dst.OutputValueAnyOf = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf, return on the first match
		}
	} else {
		dst.OutputValueAnyOf = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf1
	err = json.Unmarshal(data, &dst.OutputValueAnyOf1);
	if err == nil {
		jsonOutputValueAnyOf1, _ := json.Marshal(dst.OutputValueAnyOf1)
		if string(jsonOutputValueAnyOf1) == "{}" { // empty struct
			dst.OutputValueAnyOf1 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf1, return on the first match
		}
	} else {
		dst.OutputValueAnyOf1 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf10
	err = json.Unmarshal(data, &dst.OutputValueAnyOf10);
	if err == nil {
		jsonOutputValueAnyOf10, _ := json.Marshal(dst.OutputValueAnyOf10)
		if string(jsonOutputValueAnyOf10) == "{}" { // empty struct
			dst.OutputValueAnyOf10 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf10, return on the first match
		}
	} else {
		dst.OutputValueAnyOf10 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf11
	err = json.Unmarshal(data, &dst.OutputValueAnyOf11);
	if err == nil {
		jsonOutputValueAnyOf11, _ := json.Marshal(dst.OutputValueAnyOf11)
		if string(jsonOutputValueAnyOf11) == "{}" { // empty struct
			dst.OutputValueAnyOf11 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf11, return on the first match
		}
	} else {
		dst.OutputValueAnyOf11 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf12
	err = json.Unmarshal(data, &dst.OutputValueAnyOf12);
	if err == nil {
		jsonOutputValueAnyOf12, _ := json.Marshal(dst.OutputValueAnyOf12)
		if string(jsonOutputValueAnyOf12) == "{}" { // empty struct
			dst.OutputValueAnyOf12 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf12, return on the first match
		}
	} else {
		dst.OutputValueAnyOf12 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf13
	err = json.Unmarshal(data, &dst.OutputValueAnyOf13);
	if err == nil {
		jsonOutputValueAnyOf13, _ := json.Marshal(dst.OutputValueAnyOf13)
		if string(jsonOutputValueAnyOf13) == "{}" { // empty struct
			dst.OutputValueAnyOf13 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf13, return on the first match
		}
	} else {
		dst.OutputValueAnyOf13 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf14
	err = json.Unmarshal(data, &dst.OutputValueAnyOf14);
	if err == nil {
		jsonOutputValueAnyOf14, _ := json.Marshal(dst.OutputValueAnyOf14)
		if string(jsonOutputValueAnyOf14) == "{}" { // empty struct
			dst.OutputValueAnyOf14 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf14, return on the first match
		}
	} else {
		dst.OutputValueAnyOf14 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf15
	err = json.Unmarshal(data, &dst.OutputValueAnyOf15);
	if err == nil {
		jsonOutputValueAnyOf15, _ := json.Marshal(dst.OutputValueAnyOf15)
		if string(jsonOutputValueAnyOf15) == "{}" { // empty struct
			dst.OutputValueAnyOf15 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf15, return on the first match
		}
	} else {
		dst.OutputValueAnyOf15 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf16
	err = json.Unmarshal(data, &dst.OutputValueAnyOf16);
	if err == nil {
		jsonOutputValueAnyOf16, _ := json.Marshal(dst.OutputValueAnyOf16)
		if string(jsonOutputValueAnyOf16) == "{}" { // empty struct
			dst.OutputValueAnyOf16 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf16, return on the first match
		}
	} else {
		dst.OutputValueAnyOf16 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf17
	err = json.Unmarshal(data, &dst.OutputValueAnyOf17);
	if err == nil {
		jsonOutputValueAnyOf17, _ := json.Marshal(dst.OutputValueAnyOf17)
		if string(jsonOutputValueAnyOf17) == "{}" { // empty struct
			dst.OutputValueAnyOf17 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf17, return on the first match
		}
	} else {
		dst.OutputValueAnyOf17 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf18
	err = json.Unmarshal(data, &dst.OutputValueAnyOf18);
	if err == nil {
		jsonOutputValueAnyOf18, _ := json.Marshal(dst.OutputValueAnyOf18)
		if string(jsonOutputValueAnyOf18) == "{}" { // empty struct
			dst.OutputValueAnyOf18 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf18, return on the first match
		}
	} else {
		dst.OutputValueAnyOf18 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf2
	err = json.Unmarshal(data, &dst.OutputValueAnyOf2);
	if err == nil {
		jsonOutputValueAnyOf2, _ := json.Marshal(dst.OutputValueAnyOf2)
		if string(jsonOutputValueAnyOf2) == "{}" { // empty struct
			dst.OutputValueAnyOf2 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf2, return on the first match
		}
	} else {
		dst.OutputValueAnyOf2 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf3
	err = json.Unmarshal(data, &dst.OutputValueAnyOf3);
	if err == nil {
		jsonOutputValueAnyOf3, _ := json.Marshal(dst.OutputValueAnyOf3)
		if string(jsonOutputValueAnyOf3) == "{}" { // empty struct
			dst.OutputValueAnyOf3 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf3, return on the first match
		}
	} else {
		dst.OutputValueAnyOf3 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf4
	err = json.Unmarshal(data, &dst.OutputValueAnyOf4);
	if err == nil {
		jsonOutputValueAnyOf4, _ := json.Marshal(dst.OutputValueAnyOf4)
		if string(jsonOutputValueAnyOf4) == "{}" { // empty struct
			dst.OutputValueAnyOf4 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf4, return on the first match
		}
	} else {
		dst.OutputValueAnyOf4 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf5
	err = json.Unmarshal(data, &dst.OutputValueAnyOf5);
	if err == nil {
		jsonOutputValueAnyOf5, _ := json.Marshal(dst.OutputValueAnyOf5)
		if string(jsonOutputValueAnyOf5) == "{}" { // empty struct
			dst.OutputValueAnyOf5 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf5, return on the first match
		}
	} else {
		dst.OutputValueAnyOf5 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf6
	err = json.Unmarshal(data, &dst.OutputValueAnyOf6);
	if err == nil {
		jsonOutputValueAnyOf6, _ := json.Marshal(dst.OutputValueAnyOf6)
		if string(jsonOutputValueAnyOf6) == "{}" { // empty struct
			dst.OutputValueAnyOf6 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf6, return on the first match
		}
	} else {
		dst.OutputValueAnyOf6 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf7
	err = json.Unmarshal(data, &dst.OutputValueAnyOf7);
	if err == nil {
		jsonOutputValueAnyOf7, _ := json.Marshal(dst.OutputValueAnyOf7)
		if string(jsonOutputValueAnyOf7) == "{}" { // empty struct
			dst.OutputValueAnyOf7 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf7, return on the first match
		}
	} else {
		dst.OutputValueAnyOf7 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf8
	err = json.Unmarshal(data, &dst.OutputValueAnyOf8);
	if err == nil {
		jsonOutputValueAnyOf8, _ := json.Marshal(dst.OutputValueAnyOf8)
		if string(jsonOutputValueAnyOf8) == "{}" { // empty struct
			dst.OutputValueAnyOf8 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf8, return on the first match
		}
	} else {
		dst.OutputValueAnyOf8 = nil
	}

	// try to unmarshal JSON data into OutputValueAnyOf9
	err = json.Unmarshal(data, &dst.OutputValueAnyOf9);
	if err == nil {
		jsonOutputValueAnyOf9, _ := json.Marshal(dst.OutputValueAnyOf9)
		if string(jsonOutputValueAnyOf9) == "{}" { // empty struct
			dst.OutputValueAnyOf9 = nil
		} else {
			return nil // data stored in dst.OutputValueAnyOf9, return on the first match
		}
	} else {
		dst.OutputValueAnyOf9 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(OutputValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *OutputValue) MarshalJSON() ([]byte, error) {
	if src.OutputValueAnyOf != nil {
		return json.Marshal(&src.OutputValueAnyOf)
	}

	if src.OutputValueAnyOf1 != nil {
		return json.Marshal(&src.OutputValueAnyOf1)
	}

	if src.OutputValueAnyOf10 != nil {
		return json.Marshal(&src.OutputValueAnyOf10)
	}

	if src.OutputValueAnyOf11 != nil {
		return json.Marshal(&src.OutputValueAnyOf11)
	}

	if src.OutputValueAnyOf12 != nil {
		return json.Marshal(&src.OutputValueAnyOf12)
	}

	if src.OutputValueAnyOf13 != nil {
		return json.Marshal(&src.OutputValueAnyOf13)
	}

	if src.OutputValueAnyOf14 != nil {
		return json.Marshal(&src.OutputValueAnyOf14)
	}

	if src.OutputValueAnyOf15 != nil {
		return json.Marshal(&src.OutputValueAnyOf15)
	}

	if src.OutputValueAnyOf16 != nil {
		return json.Marshal(&src.OutputValueAnyOf16)
	}

	if src.OutputValueAnyOf17 != nil {
		return json.Marshal(&src.OutputValueAnyOf17)
	}

	if src.OutputValueAnyOf18 != nil {
		return json.Marshal(&src.OutputValueAnyOf18)
	}

	if src.OutputValueAnyOf2 != nil {
		return json.Marshal(&src.OutputValueAnyOf2)
	}

	if src.OutputValueAnyOf3 != nil {
		return json.Marshal(&src.OutputValueAnyOf3)
	}

	if src.OutputValueAnyOf4 != nil {
		return json.Marshal(&src.OutputValueAnyOf4)
	}

	if src.OutputValueAnyOf5 != nil {
		return json.Marshal(&src.OutputValueAnyOf5)
	}

	if src.OutputValueAnyOf6 != nil {
		return json.Marshal(&src.OutputValueAnyOf6)
	}

	if src.OutputValueAnyOf7 != nil {
		return json.Marshal(&src.OutputValueAnyOf7)
	}

	if src.OutputValueAnyOf8 != nil {
		return json.Marshal(&src.OutputValueAnyOf8)
	}

	if src.OutputValueAnyOf9 != nil {
		return json.Marshal(&src.OutputValueAnyOf9)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableOutputValue struct {
	value *OutputValue
	isSet bool
}

func (v NullableOutputValue) Get() *OutputValue {
	return v.value
}

func (v *NullableOutputValue) Set(val *OutputValue) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputValue) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputValue(val *OutputValue) *NullableOutputValue {
	return &NullableOutputValue{value: val, isSet: true}
}

func (v NullableOutputValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


