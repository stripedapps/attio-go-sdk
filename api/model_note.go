/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Note type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Note{}

// Note struct for Note
type Note struct {
	Id NoteId `json:"id"`
	// The slug or ID of the parent object the note belongs to.
	ParentObject string `json:"parent_object"`
	// The ID of the parent record the note belongs to.
	ParentRecordId string `json:"parent_record_id"`
	// The note title. The title is plaintext only and has no formatting.
	Title string `json:"title"`
	// The plaintext representation of the note content. The line feed character `\\n` represents new lines within the note content.
	ContentPlaintext string `json:"content_plaintext"`
	CreatedByActor NoteCreatedByActor `json:"created_by_actor"`
	// When the note was created.
	CreatedAt string `json:"created_at"`
}

type _Note Note

// NewNote instantiates a new Note object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNote(id NoteId, parentObject string, parentRecordId string, title string, contentPlaintext string, createdByActor NoteCreatedByActor, createdAt string) *Note {
	this := Note{}
	this.Id = id
	this.ParentObject = parentObject
	this.ParentRecordId = parentRecordId
	this.Title = title
	this.ContentPlaintext = contentPlaintext
	this.CreatedByActor = createdByActor
	this.CreatedAt = createdAt
	return &this
}

// NewNoteWithDefaults instantiates a new Note object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteWithDefaults() *Note {
	this := Note{}
	return &this
}

// GetId returns the Id field value
func (o *Note) GetId() NoteId {
	if o == nil {
		var ret NoteId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Note) GetIdOk() (*NoteId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Note) SetId(v NoteId) {
	o.Id = v
}

// GetParentObject returns the ParentObject field value
func (o *Note) GetParentObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentObject
}

// GetParentObjectOk returns a tuple with the ParentObject field value
// and a boolean to check if the value has been set.
func (o *Note) GetParentObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentObject, true
}

// SetParentObject sets field value
func (o *Note) SetParentObject(v string) {
	o.ParentObject = v
}

// GetParentRecordId returns the ParentRecordId field value
func (o *Note) GetParentRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentRecordId
}

// GetParentRecordIdOk returns a tuple with the ParentRecordId field value
// and a boolean to check if the value has been set.
func (o *Note) GetParentRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentRecordId, true
}

// SetParentRecordId sets field value
func (o *Note) SetParentRecordId(v string) {
	o.ParentRecordId = v
}

// GetTitle returns the Title field value
func (o *Note) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Note) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Note) SetTitle(v string) {
	o.Title = v
}

// GetContentPlaintext returns the ContentPlaintext field value
func (o *Note) GetContentPlaintext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentPlaintext
}

// GetContentPlaintextOk returns a tuple with the ContentPlaintext field value
// and a boolean to check if the value has been set.
func (o *Note) GetContentPlaintextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentPlaintext, true
}

// SetContentPlaintext sets field value
func (o *Note) SetContentPlaintext(v string) {
	o.ContentPlaintext = v
}

// GetCreatedByActor returns the CreatedByActor field value
func (o *Note) GetCreatedByActor() NoteCreatedByActor {
	if o == nil {
		var ret NoteCreatedByActor
		return ret
	}

	return o.CreatedByActor
}

// GetCreatedByActorOk returns a tuple with the CreatedByActor field value
// and a boolean to check if the value has been set.
func (o *Note) GetCreatedByActorOk() (*NoteCreatedByActor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedByActor, true
}

// SetCreatedByActor sets field value
func (o *Note) SetCreatedByActor(v NoteCreatedByActor) {
	o.CreatedByActor = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Note) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Note) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Note) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o Note) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Note) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["parent_object"] = o.ParentObject
	toSerialize["parent_record_id"] = o.ParentRecordId
	toSerialize["title"] = o.Title
	toSerialize["content_plaintext"] = o.ContentPlaintext
	toSerialize["created_by_actor"] = o.CreatedByActor
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Note) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"parent_object",
		"parent_record_id",
		"title",
		"content_plaintext",
		"created_by_actor",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNote := _Note{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNote)

	if err != nil {
		return err
	}

	*o = Note(varNote)

	return err
}

type NullableNote struct {
	value *Note
	isSet bool
}

func (v NullableNote) Get() *Note {
	return v.value
}

func (v *NullableNote) Set(val *Note) {
	v.value = val
	v.isSet = true
}

func (v NullableNote) IsSet() bool {
	return v.isSet
}

func (v *NullableNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNote(val *Note) *NullableNote {
	return &NullableNote{value: val, isSet: true}
}

func (v NullableNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


