/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommentId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentId{}

// CommentId struct for CommentId
type CommentId struct {
	// The ID of the workspace the comment belongs to.
	WorkspaceId string `json:"workspace_id"`
	// The ID of the comment.
	CommentId string `json:"comment_id"`
}

type _CommentId CommentId

// NewCommentId instantiates a new CommentId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentId(workspaceId string, commentId string) *CommentId {
	this := CommentId{}
	this.WorkspaceId = workspaceId
	this.CommentId = commentId
	return &this
}

// NewCommentIdWithDefaults instantiates a new CommentId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentIdWithDefaults() *CommentId {
	this := CommentId{}
	return &this
}

// GetWorkspaceId returns the WorkspaceId field value
func (o *CommentId) GetWorkspaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value
// and a boolean to check if the value has been set.
func (o *CommentId) GetWorkspaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspaceId, true
}

// SetWorkspaceId sets field value
func (o *CommentId) SetWorkspaceId(v string) {
	o.WorkspaceId = v
}

// GetCommentId returns the CommentId field value
func (o *CommentId) GetCommentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommentId
}

// GetCommentIdOk returns a tuple with the CommentId field value
// and a boolean to check if the value has been set.
func (o *CommentId) GetCommentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentId, true
}

// SetCommentId sets field value
func (o *CommentId) SetCommentId(v string) {
	o.CommentId = v
}

func (o CommentId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workspace_id"] = o.WorkspaceId
	toSerialize["comment_id"] = o.CommentId
	return toSerialize, nil
}

func (o *CommentId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workspace_id",
		"comment_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommentId := _CommentId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommentId)

	if err != nil {
		return err
	}

	*o = CommentId(varCommentId)

	return err
}

type NullableCommentId struct {
	value *CommentId
	isSet bool
}

func (v NullableCommentId) Get() *CommentId {
	return v.value
}

func (v *NullableCommentId) Set(val *CommentId) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentId) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentId(val *CommentId) *NullableCommentId {
	return &NullableCommentId{value: val, isSet: true}
}

func (v NullableCommentId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


