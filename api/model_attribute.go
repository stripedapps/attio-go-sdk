/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Attribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attribute{}

// Attribute struct for Attribute
type Attribute struct {
	Id AttributeId `json:"id"`
	// A title for the attribute, to be displayed across the app.
	Title string `json:"title"`
	// A text description of the attribute.
	Description NullableString `json:"description"`
	// A unique slug for the attribute for use in API responses and URLs. Formatted in snake case.
	ApiSlug string `json:"api_slug"`
	// The type of the attribute.
	Type string `json:"type"`
	// `true` if this is an Attio system-defined attribute, `false` if defined by a user or non-Attio system.
	IsSystemAttribute bool `json:"is_system_attribute"`
	// Whether or not this attribute can be written to. Can only be false when `is_system_attribute` is `true` (user-defined attributes are always writeable). If `false`, this usually means the attribute is enriched by Attio.
	IsWritable bool `json:"is_writable"`
	// When `is_required` is `true`, new records/entries must have a value for this attribute. If `false`, values may be `null`. This value does not affect existing data and you do not need to backfill `null` values if changing `is_required` from `false` to `true`.
	IsRequired bool `json:"is_required"`
	// Whether or not new values for this attribute must be unique. Uniqueness restrictions are only applied to new data and do not apply retroactively to previously created data.
	IsUnique bool `json:"is_unique"`
	// Whether or not this attribute can have multiple values. Multiselect is only available on some value types.
	IsMultiselect bool `json:"is_multiselect"`
	// Whether this attribute has a default value enabled. Must be `true` when `is_required` is `true`.
	IsDefaultValueEnabled bool `json:"is_default_value_enabled"`
	// Whether this attribute has been archived. Archived attributes are hidden from most UI, but can be restored either over the API or in workspace settings. See the [guide on archiving and deleting](/docs/archiving-vs-deleting)for more information.
	IsArchived bool `json:"is_archived"`
	DefaultValue NullableAttributeDefaultValue `json:"default_value"`
	Relationship AttributeRelationship `json:"relationship"`
	// When this attribute was created.
	CreatedAt string `json:"created_at"`
	Config AttributeConfig `json:"config"`
}

type _Attribute Attribute

// NewAttribute instantiates a new Attribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttribute(id AttributeId, title string, description NullableString, apiSlug string, type_ string, isSystemAttribute bool, isWritable bool, isRequired bool, isUnique bool, isMultiselect bool, isDefaultValueEnabled bool, isArchived bool, defaultValue NullableAttributeDefaultValue, relationship AttributeRelationship, createdAt string, config AttributeConfig) *Attribute {
	this := Attribute{}
	this.Id = id
	this.Title = title
	this.Description = description
	this.ApiSlug = apiSlug
	this.Type = type_
	this.IsSystemAttribute = isSystemAttribute
	this.IsWritable = isWritable
	this.IsRequired = isRequired
	this.IsUnique = isUnique
	this.IsMultiselect = isMultiselect
	this.IsDefaultValueEnabled = isDefaultValueEnabled
	this.IsArchived = isArchived
	this.DefaultValue = defaultValue
	this.Relationship = relationship
	this.CreatedAt = createdAt
	this.Config = config
	return &this
}

// NewAttributeWithDefaults instantiates a new Attribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeWithDefaults() *Attribute {
	this := Attribute{}
	return &this
}

// GetId returns the Id field value
func (o *Attribute) GetId() AttributeId {
	if o == nil {
		var ret AttributeId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIdOk() (*AttributeId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Attribute) SetId(v AttributeId) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *Attribute) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Attribute) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Attribute) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attribute) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Attribute) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetApiSlug returns the ApiSlug field value
func (o *Attribute) GetApiSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiSlug
}

// GetApiSlugOk returns a tuple with the ApiSlug field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetApiSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiSlug, true
}

// SetApiSlug sets field value
func (o *Attribute) SetApiSlug(v string) {
	o.ApiSlug = v
}

// GetType returns the Type field value
func (o *Attribute) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Attribute) SetType(v string) {
	o.Type = v
}

// GetIsSystemAttribute returns the IsSystemAttribute field value
func (o *Attribute) GetIsSystemAttribute() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSystemAttribute
}

// GetIsSystemAttributeOk returns a tuple with the IsSystemAttribute field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIsSystemAttributeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSystemAttribute, true
}

// SetIsSystemAttribute sets field value
func (o *Attribute) SetIsSystemAttribute(v bool) {
	o.IsSystemAttribute = v
}

// GetIsWritable returns the IsWritable field value
func (o *Attribute) GetIsWritable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsWritable
}

// GetIsWritableOk returns a tuple with the IsWritable field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIsWritableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsWritable, true
}

// SetIsWritable sets field value
func (o *Attribute) SetIsWritable(v bool) {
	o.IsWritable = v
}

// GetIsRequired returns the IsRequired field value
func (o *Attribute) GetIsRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIsRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRequired, true
}

// SetIsRequired sets field value
func (o *Attribute) SetIsRequired(v bool) {
	o.IsRequired = v
}

// GetIsUnique returns the IsUnique field value
func (o *Attribute) GetIsUnique() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUnique
}

// GetIsUniqueOk returns a tuple with the IsUnique field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIsUniqueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUnique, true
}

// SetIsUnique sets field value
func (o *Attribute) SetIsUnique(v bool) {
	o.IsUnique = v
}

// GetIsMultiselect returns the IsMultiselect field value
func (o *Attribute) GetIsMultiselect() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMultiselect
}

// GetIsMultiselectOk returns a tuple with the IsMultiselect field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIsMultiselectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMultiselect, true
}

// SetIsMultiselect sets field value
func (o *Attribute) SetIsMultiselect(v bool) {
	o.IsMultiselect = v
}

// GetIsDefaultValueEnabled returns the IsDefaultValueEnabled field value
func (o *Attribute) GetIsDefaultValueEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefaultValueEnabled
}

// GetIsDefaultValueEnabledOk returns a tuple with the IsDefaultValueEnabled field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIsDefaultValueEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefaultValueEnabled, true
}

// SetIsDefaultValueEnabled sets field value
func (o *Attribute) SetIsDefaultValueEnabled(v bool) {
	o.IsDefaultValueEnabled = v
}

// GetIsArchived returns the IsArchived field value
func (o *Attribute) GetIsArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetIsArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsArchived, true
}

// SetIsArchived sets field value
func (o *Attribute) SetIsArchived(v bool) {
	o.IsArchived = v
}

// GetDefaultValue returns the DefaultValue field value
// If the value is explicit nil, the zero value for AttributeDefaultValue will be returned
func (o *Attribute) GetDefaultValue() AttributeDefaultValue {
	if o == nil || o.DefaultValue.Get() == nil {
		var ret AttributeDefaultValue
		return ret
	}

	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attribute) GetDefaultValueOk() (*AttributeDefaultValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// SetDefaultValue sets field value
func (o *Attribute) SetDefaultValue(v AttributeDefaultValue) {
	o.DefaultValue.Set(&v)
}

// GetRelationship returns the Relationship field value
func (o *Attribute) GetRelationship() AttributeRelationship {
	if o == nil {
		var ret AttributeRelationship
		return ret
	}

	return o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetRelationshipOk() (*AttributeRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationship, true
}

// SetRelationship sets field value
func (o *Attribute) SetRelationship(v AttributeRelationship) {
	o.Relationship = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Attribute) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Attribute) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetConfig returns the Config field value
func (o *Attribute) GetConfig() AttributeConfig {
	if o == nil {
		var ret AttributeConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Attribute) GetConfigOk() (*AttributeConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Attribute) SetConfig(v AttributeConfig) {
	o.Config = v
}

func (o Attribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description.Get()
	toSerialize["api_slug"] = o.ApiSlug
	toSerialize["type"] = o.Type
	toSerialize["is_system_attribute"] = o.IsSystemAttribute
	toSerialize["is_writable"] = o.IsWritable
	toSerialize["is_required"] = o.IsRequired
	toSerialize["is_unique"] = o.IsUnique
	toSerialize["is_multiselect"] = o.IsMultiselect
	toSerialize["is_default_value_enabled"] = o.IsDefaultValueEnabled
	toSerialize["is_archived"] = o.IsArchived
	toSerialize["default_value"] = o.DefaultValue.Get()
	toSerialize["relationship"] = o.Relationship
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["config"] = o.Config
	return toSerialize, nil
}

func (o *Attribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"description",
		"api_slug",
		"type",
		"is_system_attribute",
		"is_writable",
		"is_required",
		"is_unique",
		"is_multiselect",
		"is_default_value_enabled",
		"is_archived",
		"default_value",
		"relationship",
		"created_at",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttribute := _Attribute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttribute)

	if err != nil {
		return err
	}

	*o = Attribute(varAttribute)

	return err
}

type NullableAttribute struct {
	value *Attribute
	isSet bool
}

func (v NullableAttribute) Get() *Attribute {
	return v.value
}

func (v *NullableAttribute) Set(val *Attribute) {
	v.value = val
	v.isSet = true
}

func (v NullableAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttribute(val *Attribute) *NullableAttribute {
	return &NullableAttribute{value: val, isSet: true}
}

func (v NullableAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


