/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutputValueAnyOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputValueAnyOf4{}

// OutputValueAnyOf4 struct for OutputValueAnyOf4
type OutputValueAnyOf4 struct {
	Domain string `json:"domain"`
	RootDomain string `json:"root_domain"`
	// The attribute type of the value.
	AttributeType string `json:"attribute_type"`
}

type _OutputValueAnyOf4 OutputValueAnyOf4

// NewOutputValueAnyOf4 instantiates a new OutputValueAnyOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputValueAnyOf4(domain string, rootDomain string, attributeType string) *OutputValueAnyOf4 {
	this := OutputValueAnyOf4{}
	this.Domain = domain
	this.RootDomain = rootDomain
	this.AttributeType = attributeType
	return &this
}

// NewOutputValueAnyOf4WithDefaults instantiates a new OutputValueAnyOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputValueAnyOf4WithDefaults() *OutputValueAnyOf4 {
	this := OutputValueAnyOf4{}
	return &this
}

// GetDomain returns the Domain field value
func (o *OutputValueAnyOf4) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *OutputValueAnyOf4) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *OutputValueAnyOf4) SetDomain(v string) {
	o.Domain = v
}

// GetRootDomain returns the RootDomain field value
func (o *OutputValueAnyOf4) GetRootDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootDomain
}

// GetRootDomainOk returns a tuple with the RootDomain field value
// and a boolean to check if the value has been set.
func (o *OutputValueAnyOf4) GetRootDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootDomain, true
}

// SetRootDomain sets field value
func (o *OutputValueAnyOf4) SetRootDomain(v string) {
	o.RootDomain = v
}

// GetAttributeType returns the AttributeType field value
func (o *OutputValueAnyOf4) GetAttributeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributeType
}

// GetAttributeTypeOk returns a tuple with the AttributeType field value
// and a boolean to check if the value has been set.
func (o *OutputValueAnyOf4) GetAttributeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeType, true
}

// SetAttributeType sets field value
func (o *OutputValueAnyOf4) SetAttributeType(v string) {
	o.AttributeType = v
}

func (o OutputValueAnyOf4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputValueAnyOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["root_domain"] = o.RootDomain
	toSerialize["attribute_type"] = o.AttributeType
	return toSerialize, nil
}

func (o *OutputValueAnyOf4) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"root_domain",
		"attribute_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutputValueAnyOf4 := _OutputValueAnyOf4{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutputValueAnyOf4)

	if err != nil {
		return err
	}

	*o = OutputValueAnyOf4(varOutputValueAnyOf4)

	return err
}

type NullableOutputValueAnyOf4 struct {
	value *OutputValueAnyOf4
	isSet bool
}

func (v NullableOutputValueAnyOf4) Get() *OutputValueAnyOf4 {
	return v.value
}

func (v *NullableOutputValueAnyOf4) Set(val *OutputValueAnyOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputValueAnyOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputValueAnyOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputValueAnyOf4(val *OutputValueAnyOf4) *NullableOutputValueAnyOf4 {
	return &NullableOutputValueAnyOf4{value: val, isSet: true}
}

func (v NullableOutputValueAnyOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputValueAnyOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


